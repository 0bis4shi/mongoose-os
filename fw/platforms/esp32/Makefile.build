MAKEFLAGS += --warn-undefined-variables
.DEFAULT_GOAL := all

APP ?= mongoose-iot
APP_PLATFORM = esp32
APP_MODULES ?=
APP_CFLAGS ?=
APP_FS_PATH ?=
APP_EXTRA_SRCS ?=
APP_VERSION ?=
APP_BUILD_ID ?=

MIOT_PATH ?= ../../..
COMMON_PATH ?= $(MIOT_PATH)/common
SPIFFS_PATH ?= $(COMMON_PATH)/spiffs
MIOT_ESP_PATH ?= $(MIOT_PATH)/fw/platforms/esp32
COMMON_FS_PATH ?= $(MIOT_PATH)/fw/skeleton/fs
export MIOT_ESP_PATH
export SPIFFS_PATH

BUILD_DIR ?= $(CURDIR)/.build
FS_STAGING_DIR = $(BUILD_DIR)/fs
FW_STAGING_DIR ?= $(BUILD_DIR)/fw_temp
FW_DIR ?= $(CURDIR)/firmware
GEN_DIR ?= $(BUILD_DIR)/gen

FS_IMG = $(FW_STAGING_DIR)/fs.img
# Keep in sync with partitions_miot.csv
FS_ADDR = 0x110000
FS_SIZE = 131072
FS_BLOCK_SIZE = 4096
FS_PAGE_SIZE = 256
FS_ERASE_SIZE = 4096

# Absolutize all paths which can be given by the caller
override BUILD_DIR := $(abspath $(BUILD_DIR))
override FW_STAGING_DIR := $(abspath $(FW_STAGING_DIR))
override FW_DIR := $(abspath $(FW_DIR))
override GEN_DIR := $(abspath $(GEN_DIR))
export BUILD_DIR
export GEN_DIR

BUILD_INFO_C = $(GEN_DIR)/build_info.c
BUILD_INFO_O = $(GEN_DIR)/build_info.o
MG_BUILD_INFO_C = $(GEN_DIR)/mg_build_info.c
MG_BUILD_INFO_O = $(GEN_DIR)/mg_build_info.o
BUILD_INFO_JSON = $(GEN_DIR)/build_info.json

CFLAGS += -DMIOT_APP=\"$(APP)\" -DCS_SPIFFS_ENABLE_VFS -I$(MIOT_PATH) \
          -DIRAM='__attribute__((section(".iram1")))'

# Generated files

src-build: $(BUILD_INFO_O) $(MG_BUILD_INFO_O)

$(BUILD_INFO_O): $(BUILD_INFO_C)
	$(summary) CC $@ '$(BUILD_INFO_C)'
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

$(MG_BUILD_INFO_O): $(MG_BUILD_INFO_C)
	$(summary) CC $@ '$(BUILD_INFO_C)'
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

$(BUILD_INFO_C) $(BUILD_INFO_JSON):
	$(call gen_build_info,$@,,$(APP_BUILD_ID),$(APP_VERSION),,$(BUILD_INFO_C),$(BUILD_INFO_JSON))

$(MG_BUILD_INFO_C):
	$(call gen_build_info,$@,$(MIOT_PATH)/fw,,,mg_,$(MG_BUILD_INFO_C),)

# Settings for the ESP-IDF build system
# See docs here:
#   https://github.com/espressif/esp-idf/blob/master/docs/build_system.rst

PROJECT_NAME = $(APP)
BUILD_DIR_BASE = $(BUILD_DIR)

SRCDIRS = src
# Explicitly specify SDK components to build. Notably, we do not build BT.
COMPONENT_DIRS = $(COMMON_PATH) $(MIOT_PATH)/third_party /opt $(MIOT_ESP_PATH) $(IDF_PATH)/components
SDK_COMPONENTS = bootloader bootloader_support driver esp32 esptool_py \
                 ethernet expat freertos log lwip micro-ecc newlib \
                 nvs_flash partition_table spi_flash tcpip_adapter vfs \
                 wpa_supplicant xtensa-debug-module
COMPONENTS = $(SDK_COMPONENTS) cryptoauthlib cs_mbedtls spiffs

# CONFIG_BT_RESERVE_DRAM is used when generating linker script and is not
# defined when bt is not built.
CPPFLAGS += -DCONFIG_BT_RESERVE_DRAM=0

ESPFLASHMODE = qio
ESPFLASHSIZE = 4MB
ESPBAUD = 1500000

# VERBOSE = 1

include $(IDF_PATH)/make/project.mk

LDFLAGS += $(BUILD_INFO_O) $(MG_BUILD_INFO_O)


include $(MIOT_PATH)/fw/common.mk

FW_PARTS = boot:type=boot,addr=0x1000,src=$(BOOTLOADER_BIN) \
           pt:type=pt,addr=$(PARTITION_TABLE_OFFSET),src=$(PARTITION_TABLE_BIN) \
           app:type=app,addr=$(CONFIG_APP_OFFSET),src=$(APP_BIN) \
           fs:src=$(FS_IMG),type=fs,addr=$(FS_ADDR),fs_size=$(FS_SIZE),fs_block_size=$(FS_BLOCK_SIZE),fs_page_size=$(FS_PAGE_SIZE),fs_erase_size=$(FS_ERASE_SIZE)

include $(MIOT_PATH)/common/scripts/build_info.mk
include $(MIOT_PATH)/common/scripts/fw_meta.mk
include $(MIOT_PATH)/fw/src/spiffs.mk

all_binaries: $(FW_ZIP)

all: $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR)

foo: $(GEN_DIR)/gen_done

# Put defaults on the filesystem under the old name, for compatibility.
FS_FILES += $(GEN_DIR)/conf_defaults.json

$(GEN_DIR)/conf_defaults.json: src-build

$(BUILD_DIR) $(FW_DIR) $(FW_STAGING_DIR) $(GEN_DIR):
	$(vecho) "MKDIR $@ $(BUILD_INFO_C)"
	$(Q) mkdir -p $@

$(FW_MANIFEST): $(BUILD_INFO_JSON) $(APP_BIN) $(FS_IMG)

#$(SYS_CONFIG_C) $(SYS_RO_VARS_C)
$(FS_IMG): $(APP_FS_PATH) $(COMMON_FS_PATH) $(FS_FILES) $(JSBIN_SRCS)
	$(call mkspiffs,$(FS_SIZE))

clean:
	rm -rf $(BUILD_DIR) $(FW_DIR)
