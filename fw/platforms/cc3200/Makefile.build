# -*- mode: makefile -*-
#
# Mongoose IoT for CC3200
#
# This file is executed inside Docker build container.
# It can be used without container too if SDK_PATH and V7_PATH are configured.
MAKEFLAGS += --warn-undefined-variables

APP ?= mongoose-iot
APP_PLATFORM = cc3200
APP_MODULES ?=
APP_CFLAGS ?=
APP_FS_PATH ?=
APP_SLFS_PATH ?=
APP_EXTRA_SRCS ?=

SJ_ENABLE_JS ?= 1
SJ_ENABLE_CLUBBY ?= 1

TOOLCHAIN ?= /opt/ti-cgt-arm_5.2.7
APP_ORG = 0x20000000
RAM_SIZE = 0x40000
BOOT_LOADER_SIZE = 0x4000
# SLFS being what it is, we always produce code image of maximum size
# to ensure OTA works when code size increases.
CC3200_PADDED_IMAGE_SIZE ?= $(shell echo $$(($(RAM_SIZE) - $(BOOT_LOADER_SIZE) - 0x1000)))

SDK_PATH ?= /cc3200-sdk
REPO_PATH ?= ../../..
V7_PATH ?= $(REPO_PATH)/v7
COMMON_PATH ?= $(REPO_PATH)/common
MGIOT_PATH ?= $(REPO_PATH)/fw
MGIOT_CC3200_PATH ?= $(REPO_PATH)/fw/platforms/cc3200
COMMON_CC3200_PATH ?= $(REPO_PATH)/common/platforms/cc3200
SPIFFS_PATH ?= $(COMMON_PATH)/spiffs
MONGOOSE_PATH ?= $(REPO_PATH)/mongoose
FROZEN_PATH ?= $(REPO_PATH)/frozen
BOOT_PATH ?= $(MGIOT_CC3200_PATH)/boot

BUILD_DIR ?= $(CURDIR)/.build
FW_STAGING_DIR = $(BUILD_DIR)/fw_temp
FW_DIR = $(CURDIR)/firmware
BOOT_BUILD_DIR = $(BUILD_DIR)/boot
BOOT_FW_DIR = $(BOOT_BUILD_DIR)/fw
# When sizing filesystem consider that SFLASH should have enough space for:
#  + boot loader
#  + 2 boot loader configs
#  + 2 app images
#  + 4 fs containers
#  + NWP service pack
# 96K is the practical maximum for 8Mbit flash chips (installed on CC3200MOD).
FS_SIZE ?= 98304
FS_BLOCK_SIZE ?= 4096
FS_PAGE_SIZE ?= 256
FS_ERASE_SIZE ?= 4096
FS_META_SIZE = 64
FS_IMAGE_SIZE = $(shell echo $$(($(FS_SIZE) + $(FS_META_SIZE))))

# With safe code update, new code image is written to a different file on update
# making it possible to safely revert the update.
CC3200_SAFE_CODE_UPDATE ?= 1

MGIOT_SRC_PATH ?= $(MGIOT_PATH)/src
COMMON_FS_PATH ?= $(MGIOT_SRC_PATH)/fs
MGIOT_JS_PATH ?= $(MGIOT_SRC_PATH)/js
FS_STAGING_DIR = $(BUILD_DIR)/fs_temp

# For FW_VERSION, COMMON_V7_FEATURES, MG_FEATURES_TINY
include $(REPO_PATH)/fw/common.mk

JSBIN_SRCS := $(MGIOT_JS_PATH)/sys_init.js \
              $(MGIOT_JS_PATH)/demo.js \
              $(MGIOT_JS_PATH)/I2C.js \
              $(JS_EXTRA)

ifneq "$(APP_FS_PATH)" ""
  JSBIN_SRCS += $(wildcard $(APP_FS_PATH)/*.js)
endif

JS_SRCS :=

JSBIN_EXT := js
JS_EXT := js

APP_MODULES += $(MGIOT_CC3200_PATH)/src
VPATH = $(APP_MODULES) \
        $(MGIOT_CC3200_PATH)/tools \
        $(BOOT_PATH)/lib $(BUILD_DIR)
IPATH = $(APP_MODULES) $(BOOT_PATH)/lib $(BUILD_DIR) $(REPO_PATH)

V7_FEATURES ?= $(COMMON_V7_FEATURES) \
               -DV7_BUILD_PROFILE=1 \
               -DV7_DISABLE_AST_TAG_NAMES \
               -DV7_ENABLE_COMPACTING_GC \
               -DV7_DISABLE_LINE_NUMBERS \
               -DV7_DISABLE_FILENAMES \
               -DV7_ENABLE_FILE \
               -DDISABLE_MD5

V7_HOST_FEATURES ?= $(V7_FEATURES) -DV7_ENABLE__RegExp=1

MG_FEATURES ?= $(MG_FEATURES_TINY) \
               -DMG_LOCALS -DMG_ENABLE_SSL \
               -DMG_DISABLE_MQTT \
               -DMG_DISABLE_FILESYSTEM -DMG_FS_SLFS \
               -DMG_EXT_SHA1 -DDISABLE_SHA1

MGIOT_FEATURES ?= -DSJ_ENABLE_UPDATER_CLUBBY \
                  -DSJ_ENABLE_UPDATER_POST \
                  -DSJ_ENABLE_GPIO_API \
                  -DSJ_ENABLE_I2C_API \
                  -DSJ_ENABLE_WIFI_API \
                  -DSJ_ENABLE_HTTP_CLIENT_API

V7_MEMORY_FLAGS = -DMBUF_SIZE_MULTIPLIER=1 \
                  -DV7_STACK_SIZE=8192-64 \
                  -DV7_DISABLE_INTERPRETER_STACK_CHECK \
                  -DFS_MAX_OPEN_FILES=5

SDK_FLAGS = -DTARGET_IS_CC3200 -DUSE_FREERTOS -DSL_PLATFORM_MULTI_THREADED

APP_ELF = $(BUILD_DIR)/$(APP).axf
APP_BIN = $(BUILD_DIR)/$(APP).bin
BOOT_BIN = $(BOOT_FW_DIR)/mg-boot.bin
MK_BOOT_CFG_BIN = $(BOOT_BUILD_DIR)/mkcfg
FS_IMG = $(BUILD_DIR)/fs.img
FS_EMPTY_IMG = $(BUILD_DIR)/fs_empty.img
SYS_CONFIG_C = $(BUILD_DIR)/sys_config.c
SYS_RO_VARS_C = $(BUILD_DIR)/sys_ro_vars.c
BUILD_INFO_C = $(BUILD_DIR)/build_info.c
BUILD_INFO_O = $(BUILD_DIR)/build_info.o
BUILD_INFO_JSON = $(BUILD_DIR)/build_info.json
BOOT_CFG_0 = $(BUILD_DIR)/mg-boot.cfg.0
BOOT_CFG_1 = $(BUILD_DIR)/mg-boot.cfg.1
MK_FS_META_BIN = $(BUILD_DIR)/mkfsmeta

GENFILES_LIST = $(SYS_CONFIG_C) $(SYS_RO_VARS_C)

.PHONY: all clean flash

SJ_SRCS = sj_init.c \
          sj_mongoose.c \
          sj_timers_mongoose.c \
          sj_v7_ext.c \
          sj_wifi.c \
          sj_config.c sj_sys_config.c \
          $(notdir $(SYS_CONFIG_C)) $(notdir $(SYS_RO_VARS_C)) \
          cs_crc32.c sj_updater_common.c sj_updater_clubby.c sj_updater_post.c \
          sj_utils.c \
          clubby_proto.c \
          sj_clubby.c \
          json_utils.c
ifeq "$(SJ_ENABLE_JS)" "1"
SJ_SRCS += v7.c \
           sj_clubby_js.c \
           sj_config_js.c \
           sj_gpio_js.c \
           sj_http_js.c \
           sj_i2c_js.c \
           sj_init_js.c \
           sj_prompt.c \
           sj_sys_config_js.c \
           sj_timers_js.c \
           sj_wifi_js.c
endif

VPATH += $(MGIOT_PATH)/src $(COMMON_PATH)
ifneq "$(TOOLCHAIN)" "gcc"
  SJ_SRCS += umm_malloc.c
  VPATH += $(COMMON_PATH)/umm_malloc
endif

SPIFFS_SRCS = $(notdir $(wildcard $(SPIFFS_PATH)/*.c))
IPATH += $(SPIFFS_PATH)
VPATH += $(SPIFFS_PATH)

FREERTOS_SRCS = timers.c list.c queue.c tasks.c port.c heap_3.c osi_freertos.c
DRIVER_SRCS = cpu.c flash.c i2c.c interrupt.c pin.c prcm.c spi.c uart.c udma.c utils.c
SL_SRCS = socket.c wlan.c driver.c device.c netapp.c netcfg.c network_common.c \
          cc_pal.c fs.c
SDK_SRCS = $(FREERTOS_SRCS) $(DRIVER_SRCS) $(SL_SRCS)
IPATH += $(SDK_PATH) $(SDK_PATH)/inc $(SDK_PATH)/driverlib $(SDK_PATH)/oslib \
         $(SDK_PATH)/simplelink $(SDK_PATH)/simplelink/include \
         $(SDK_PATH)/simplelink_extlib/provisioninglib \
         $(SDK_PATH)/third_party/FreeRTOS/source/include
VPATH += $(SDK_PATH)/driverlib $(SDK_PATH)/oslib $(SDK_PATH)/simplelink \
         $(SDK_PATH)/simplelink/source $(SDK_PATH)/third_party/FreeRTOS/source \
         $(SDK_PATH)/third_party/FreeRTOS/source/portable/MemMang

APP_SRCS := $(notdir $(foreach m,$(APP_MODULES),$(wildcard $(m)/*.c)))
SRCS = $(APP_SRCS) boot.c mongoose.c frozen.c $(SJ_SRCS) $(SPIFFS_SRCS) $(SDK_SRCS) $(APP_EXTRA_SRCS)

MGIOT_CFLAGS = -DCC3200_FS_SPIFFS -Dcc3200 -DCC3200_FS_SPIFFS \
               -DSPIFFS_HAL_CALLBACK_EXTRA=1

ifeq "$(SJ_ENABLE_JS)" "1"
  GENFILES_LIST += $(V7_PATH)/v7.c $(V7_PATH)/v7.h
  MGIOT_FEATURES += -DSJ_ENABLE_JS
  VPATH += $(V7_PATH)
  $(BUILD_DIR)/v7.o: CFLAGS += $(V7_FEATURES)
  $(BUILD_DIR)/mongoose.o: CFLAGS += -DEXCLUDE_COMMON
else
  SJ_SRCS += cs_file.c
endif
ifeq "$(SJ_ENABLE_CLUBBY)" "1"
  MGIOT_FEATURES += -DSJ_ENABLE_CLUBBY -DSJ_ENABLE_CLUBBY_API
endif

.DEFAULT_GOAL := all

clean:
	@rm -rf $(BUILD_DIR) $(FW_DIR)

$(BUILD_DIR) $(FW_DIR) $(APP_FS_PATH) $(FS_STAGING_DIR) $(APP_SLFS_PATH) $(FW_STAGING_DIR):
	$(vecho) "MKDIR $@"
	@mkdir -p $@

FS_FILES = $(filter-out $(JSBIN_SRCS),$(wildcard $(COMMON_FS_PATH)/*))
ifneq "$(APP_FS_PATH)" ""
  FS_FILES += $(filter-out $(JSBIN_SRCS),$(wildcard $(APP_FS_PATH)/*))
endif
ifneq "$(APP_SLFS_PATH)" ""
  SLFS_FILES = $(wildcard $(APP_SLFS_PATH)/*)
else
  SLFS_FILES =
endif

CREATE_RAW_FS ?= 0

FW_PARTS = /sys/mcuimg.bin:type=boot,src=$(BOOT_BIN),falloc=14336 \
           $(notdir $(BOOT_CFG_0)):type=boot_cfg,src=$(BOOT_CFG_0) \
           $(notdir $(BOOT_CFG_1)):type=boot_cfg,src=$(BOOT_CFG_1) \
           $(notdir $(APP_BIN)).0:type=app,src=$(APP_BIN),falloc=$(CC3200_PADDED_IMAGE_SIZE),load_addr=$(APP_ORG) \
           spiffs.img.0.0:type=fs,src=$(FS_IMG),fs_size=$(FS_SIZE),fs_block_size=$(FS_BLOCK_SIZE),fs_page_size=$(FS_PAGE_SIZE),fs_erase_size=$(FS_ERASE_SIZE) \
           spiffs.img.0.1:type=slfile,falloc=$(FS_IMAGE_SIZE) \
           spiffs.img.1.0:type=slfile,falloc=$(FS_IMAGE_SIZE) \
           $(foreach f,$(SLFS_FILES), $(notdir $(f)):type=slfile,src=$(f))

ifneq "$(CC3200_SP_FILE)" ""
  FW_PARTS += /sys/servicepack.ucf:type=slfile,src=$(CC3200_SP_FILE),falloc=60416,sign=$(notdir $(CC3200_SP_FILE)).sign \
              $(notdir $(CC3200_SP_FILE)).sign:type=signature,src=$(CC3200_SP_FILE).sign
endif

ifeq "$(CREATE_RAW_FS)" "1"
  FW_PARTS += fs_dir:type=fs_dir,src=$(FS_STAGING_DIR),fs_size=$(FS_SIZE),fs_block_size=$(FS_BLOCK_SIZE),fs_page_size=$(FS_PAGE_SIZE),fs_erase_size=$(FS_ERASE_SIZE)
endif

ifeq "$(CC3200_SAFE_CODE_UPDATE)" "1"
  FW_PARTS += $(notdir $(APP_BIN)).1:type=slfile,falloc=$(CC3200_PADDED_IMAGE_SIZE)
  MGIOT_CFLAGS += -DCC3200_SAFE_CODE_UPDATE=1
endif
include $(REPO_PATH)/common/scripts/fw_meta.mk

OBJS = $(addprefix $(BUILD_DIR)/,$(patsubst %.c,%.o,$(SRCS)))
VPATH += $(MONGOOSE_PATH) $(FROZEN_PATH)

include $(REPO_PATH)/common/scripts/build_info.mk
include $(REPO_PATH)/fw/src/sys_config.mk

$(BUILD_DIR)/miniz.o: CFLAGS += -DMINIZ_NO_STDIO

# TODO(dfrank): Fix V7 pre-compilation
$(FS_IMG): $(APP_FS_PATH) $(FS_FILES) $(JSBIN_SRCS) $(MK_FS_META_BIN)
	$(Q) rm -f $(FS_STAGING_DIR)/*
	$(Q) $(foreach f,$(FS_FILES), \
	  echo "  CP    $(f) -> $(FS_STAGING_DIR)"; \
	  cp $(f) $(FS_STAGING_DIR);)
ifeq "$(SJ_ENABLE_JS)" "1"
	$(Q) $(foreach jsbin,$(JSBIN_SRCS), \
	  echo "  V7C   $(jsbin) -> $(FS_STAGING_DIR)/$(basename $(notdir $(jsbin))).$(JSBIN_EXT)" && \
	  cp $(jsbin) $(FS_STAGING_DIR)/$(basename $(notdir $(jsbin))).$(JSBIN_EXT) && ) true
endif
	$(vecho) "MKFS  $@"
	$(Q) /usr/local/bin/mkspiffs $(FS_SIZE) $(FS_STAGING_DIR) > $@
	$(Q) $(MK_FS_META_BIN) $(FS_SIZE) $(FS_BLOCK_SIZE) $(FS_PAGE_SIZE) $(FS_ERASE_SIZE) >> $@

$(FS_EMPTY_IMG): $(MK_FS_META_BIN)
	$(vecho) "GEN   $@"
	$(Q) dd if=/dev/zero of=$@ bs=$(FS_BLOCK_SIZE) \
	        count=$(shell echo $$(($(FS_SIZE) / $(FS_BLOCK_SIZE)))) > $@ 2>/dev/null
	$(Q) $(MK_FS_META_BIN) 0 0 0 0 0 >> $@

ifeq "$(SJ_ENABLE_JS)" "1"
$(V7_PATH)/v7.c $(V7_PATH)/v7.h:
	make -C $(V7_PATH) $(notdir $@)

$(BUILD_DIR)/v7: $(V7_PATH)/v7.c $(V7_PATH)/v7.h
	$(vecho) "GCC   v7"
	$(Q) gcc -DV7_EXE -DV7_FREEZE $(V7_HOST_FEATURES) $(V7_PATH)/v7.c -lm -o $(BUILD_DIR)/v7

$(FS_IMG): $(BUILD_DIR)/v7
endif

SDK_OBJS = $(addprefix $(BUILD_DIR)/,$(patsubst %.c,%.o,$(SDK_SRCS)))

OBJCOPY = arm-none-eabi-objcopy

ifeq "$(TOOLCHAIN)" "gcc"

APP_LDFLAGS ?= --defsym=ORG=$(APP_ORG) --defsym=RAM_SIZE=$(RAM_SIZE) \
               -T $(COMMON_CC3200_PATH)/cc3200.ld --entry=ResetISR
include $(COMMON_CC3200_PATH)/gcc.mk

else

APP_LD_SCRIPT ?= $(MGIOT_CC3200_PATH)/src/cc3200_mgiot.cmd
APP_LDFLAGS ?= $(APP_LD_SCRIPT) --heap_size=0 --stack_size=0x100 \
               --disable_auto_rts -l rtsv7M4_T_le_eabi_cesanta.lib
include $(COMMON_CC3200_PATH)/ti.mk
$(APP_ELF): $(APP_LD_SCRIPT)
# Selectively inhibit warnings in external code.
$(BUILD_DIR)/spiffs_gc.o: CFLAGS += --diag_suppress=1944
$(BUILD_DIR)/spiffs_hydrogen.o: CFLAGS += --diag_suppress=770,1944
$(BUILD_DIR)/port.o: CFLAGS += --diag_suppress=193,225
$(BUILD_DIR)/tasks.o: CFLAGS += --diag_suppress=225

MGIOT_CFLAGS += -DMG_TI_NO_HOST_INTERFACE=1

VPATH += $(MGIOT_CC3200_PATH)/src/ti
OBJS += $(BUILD_DIR)/exc_handler_top.o

endif

CFLAGS += $(patsubst %,-I%,$(subst :, ,$(IPATH)))
CFLAGS += -DNDEBUG -DCS_NDEBUG \
          $(SDK_FLAGS) $(V7_MEMORY_FLAGS) \
          -DFW_ARCHITECTURE=\"$(APP_PLATFORM)\" \
          $(MG_FEATURES) $(MGIOT_FEATURES) \
          $(MGIOT_CFLAGS) $(APP_CFLAGS) $(CFLAGS_EXTRA)

$(BUILD_DIR)/cc3200_fs_spiffs_container.o: \
    CFLAGS += -DDEFAULT_FS_SIZE=$(FS_SIZE) \
              -DDEFAULT_FS_BLOCK_SIZE=$(FS_BLOCK_SIZE) \
              -DDEFAULT_FS_PAGE_SIZE=$(FS_PAGE_SIZE) \
              -DDEFAULT_FS_ERASE_SIZE=$(FS_ERASE_SIZE)

all: $(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(FS_STAGING_DIR) $(SYS_CONFIG_C) \
     $(BUILD_INFO_C) $(FW_ZIP)

$(FW_MANIFEST): $(BOOT_BIN) $(BOOT_CFG_0) $(BOOT_CFG_1) \
                $(APP_BIN) $(FS_IMG) $(FS_EMPTY_IMG) \
                $(APP_SLFS_PATH) $(SLFS_FILES) ${FS_FILES} ${JSBIN_SRCS}

$(BOOT_BIN) $(MK_BOOT_CFG_BIN): $(wildcard $(BOOT_PATH)/src/*) \
                                $(wildcard $(BOOT_PATH)/tools/mkcfg.c)
	$(vecho) "MAKE  $@"
	$(Q) $(MAKE) -C $(BOOT_PATH) -f Makefile.build APP=mg-boot TOOLCHAIN=gcc \
	             SDK_PATH=$(SDK_PATH) PYTHON=$(PYTHON) \
	             BUILD_DIR=$(BOOT_BUILD_DIR) FW_DIR=$(BOOT_FW_DIR) \
	             CREATE_ZIP=0 dirs $@

$(BOOT_CFG_0): $(MK_BOOT_CFG_BIN)
	$(vecho) "MKCFG $@"
	$(Q) $(MK_BOOT_CFG_BIN) $(notdir $(APP_BIN)).0 $(APP_ORG) spiffs.img.0 > $@

$(BOOT_CFG_1): $(MK_BOOT_CFG_BIN)
	$(vecho) "MKCFG $@"
	$(Q) $(MK_BOOT_CFG_BIN) "" 0 "" 0 > $@

$(APP_BIN): $(APP_ELF)
	$(vecho) "BIN   $< -> $@"
	$(Q) $(OBJCOPY) -O binary $< $@
	$(Q) echo "     Code size: $$(ls -l $@ | awk '{print $$5}')"


$(APP_ELF): $(OBJS) $(BUILD_INFO_O)

$(BUILD_INFO_C) $(BUILD_INFO_JSON): $(OBJS)

$(BUILD_INFO_O): $(BUILD_INFO_C)

$(MK_FS_META_BIN): $(MGIOT_CC3200_PATH)/tools/mkfsmeta.c
	$(vecho) "GCC   $< -> $@"
	$(Q) gcc -Wall -Werror -I$(MGIOT_CC3200_PATH) -o $@ $^

# Pull in auto-generated .c dependencies (if any).
-include $(wildcard $(BUILD_DIR)/*.d)
