.PHONY: all clean
.DEFAULT_GOAL := all

MGOS_ENABLE_BITBANG = 0
MGOS_ENABLE_DEBUG_UDP = 0
MGOS_ENABLE_SNTP = 0
MGOS_ENABLE_UPDATER = 0

USE_LWIP ?= 1

include $(MGOS_PATH)/fw/src/mgos_features.mk

TARGET ?=

ifeq "${TARGET}" ""
$(error Please, specify TARGET. Possible values are NUCLEO-F746ZG or DISCO-F746G)
endif

APP ?= mongoose-os
APP_PLATFORM = stm32
APP_CFLAGS ?=
APP_EXTRA_SRCS ?=
FFI_SYMBOLS ?=

# List of app source files, globs are supported
APP_SOURCES ?=
# List of app files to put into the device's filesystem, globs are supported
APP_FS_FILES ?=

# NOTE: those two are deprecated. Use APP_SOURCES and APP_FS_FILES instead.
APP_MODULES ?=
APP_FS_PATH ?=

# For backward compatibility, convert old APP_MODULES and APP_FS_PATH into
# new APP_SOURCES and APP_FS_FILES
ifneq "$(APP_MODULES)" ""
APP_SOURCES += $(foreach m,$(APP_MODULES),$(m)/*.c $(m)/*.cpp)
endif
ifneq "$(APP_FS_PATH)" ""
APP_FS_FILES += $(foreach m,$(APP_FS_PATH),$(m)/*)
endif

# Get list of dirs which contain sources and filesystem files
APP_SOURCE_DIRS = $(sort $(dir $(APP_SOURCES)))
APP_FS_DIRS = $(sort $(dir $(APP_FS_FILES)))

MGOS_PATH ?= ../../..
COMMON_PATH ?= $(MGOS_PATH)/common
MONGOOSE_PATH ?= $(MGOS_PATH)/mongoose
FROZEN_PATH ?= $(MGOS_PATH)/frozen
MGOS_SRC_PATH ?= $(MGOS_PATH)/fw/src
MGOS_PLATFORM_PATH ?= $(MGOS_PATH)/fw/platforms/stm32
MGOS_FEATURES ?=

# Normal (docker) version
PLATFORM_SDK_ROOT ?= /opt/stm32-sdks/
# Debug (local) version
# PLATFORM_SDK_ROOT ?= $(MGOS_PATH)/docker/stm32/stm32-sdks/

PLATFORM_SDK_PATH = ${PLATFORM_SDK_ROOT}/${TARGET}

ifeq "$(wildcard $(PLATFORM_SDK_PATH))" ""
$(error Invalid TARGET. Possible values are NUCLEO-F746ZG or DISCO-F746G)
endif

PLATFORM_CFLAGS = $(shell cat $(PLATFORM_SDK_PATH)/cflags)

CC = arm-none-eabi-gcc
OBJCOPY = arm-none-eabi-objcopy
NM = arm-none-eabi-nm

BUILD_DIR ?= $(CURDIR)/.build
FW_STAGING_DIR ?= $(BUILD_DIR)/fw_temp
FW_DIR ?= $(CURDIR)/fw
GEN_DIR ?= $(BUILD_DIR)/gen

# Absolutize all paths which can be given by the caller
override BUILD_DIR := $(abspath $(BUILD_DIR))
override FW_STAGING_DIR := $(abspath $(FW_STAGING_DIR))
override FW_DIR := $(abspath $(FW_DIR))
override GEN_DIR := $(abspath $(GEN_DIR))
override BUILD_DIR := $(abspath $(BUILD_DIR))

include $(MGOS_PATH)/fw/common.mk

SDK_SRCS = $(shell find $(PLATFORM_SDK_PATH)/STM -name '*.[cs]')
SDK_INCLUDES = $(shell find $(PLATFORM_SDK_PATH)/STM -type d)
LDSCRIPT = $(MGOS_PLATFORM_PATH)/ld/stm32.ld

# Platform support files
ADD_SRCS = stm32_fs.c stm32_gpio.c stm32_hal.c stm32_hw_timers.c \
           stm32_libc.c stm32_lwip.c \
           stm32_main.c stm32_uart.c \
           stm32_vfs_dev_flash.c \
           $(notdir $(FS_BIN_C))
# stm32_i2c.c

# Additional files from SDK
ADD_SRCS += stm32_gpio_defs.c

APP_ELF = $(BUILD_DIR)/$(APP).elf
APP_BIN = $(BUILD_DIR)/$(APP).bin
SPIFFS_PATH ?= $(COMMON_PATH)/spiffs
FLASH_BASE = 0x8000000
FLASH_SIZE = 1048576
FS_SIZE = 262144
FS_ADDR = $(shell echo $$(($(FLASH_SIZE) - $(FS_SIZE))))
FS_BLOCK_SIZE = 4096
FS_PAGE_SIZE = 256
FS_ERASE_SIZE = 4096
MKSPIFFS = /usr/local/bin/mkspiffs8
FS_BIN_C = $(GEN_DIR)/fs_bin.c
FS_STAGING_DIR = $(BUILD_DIR)/fs

FS_IMG = $(FW_STAGING_DIR)/fs.bin

include $(MGOS_PATH)/fw/src/spiffs.mk

BUILD_INFO_C = $(GEN_DIR)/build_info.c
BUILD_INFO_JSON = $(GEN_DIR)/build_info.json
MG_BUILD_INFO_C = $(GEN_DIR)/mg_build_info.c
MGOS_CONFIG_C = $(GEN_DIR)/mgos_config.c
MGOS_CONFIG_DEFAULTS_JSON = $(GEN_DIR)/conf0.json
MGOS_CONFIG_SCHEMA_JSON = $(GEN_DIR)/mgos_config_schema.json
MGOS_RO_VARS_C = $(GEN_DIR)/mgos_ro_vars.c
MGOS_RO_VARS_SCHEMA_JSON = $(GEN_DIR)/mgos_ro_vars_schema.json
GENFILES_FLAG = $(BUILD_DIR)/genfiles.done
GENFILES_LIST = $(MGOS_CONFIG_C) $(MGOS_RO_VARS_C) $(BUILD_INFO_C) $(MG_BUILD_INFO_C) $(FS_BIN_C) $(FFI_EXPORTS_C)
SYMBOLS_DUMP = $(GEN_DIR)/symbols_dump.txt
FFI_EXPORTS_C = $(GEN_DIR)/ffi_exports.c
FFI_EXPORTS_O = $(BUILD_DIR)/ffi_exports.c.o
SRCS = $(notdir $(SDK_SRCS) $(ADD_SRCS) $(APP_SRCS) $(MGOS_SRCS))

MGOS_SRCS += $(notdir $(MGOS_CONFIG_C)) $(notdir $(MGOS_RO_VARS_C)) \
             $(notdir $(MG_BUILD_INFO_C)) $(notdir $(BUILD_INFO_C)) \
             mgos_config_util.c mgos_gpio.c mgos_hooks.c mgos_hw_timers.c \
             mgos_sys_config.c \
             mgos_timers.c cs_crc32.c cs_file.c mgos_mongoose.c \
             mongoose.c \
             json_utils.c frozen.c mgos_uart.c cs_rbuf.c mgos_init.c \
             cs_dbg.c mgos_dlsym.c mgos_system.c mgos_utils.c \
             mgos_vfs.c mgos_vfs_dev.c mgos_vfs_fs_spiffs.c

MGOS_SRCS += $(notdir $(foreach m, $(SPIFFS_PATH),$(wildcard $(m)/*.c)))

APP_SRCS := $(notdir $(foreach m,$(APP_SOURCES),$(wildcard $(m)))) $(APP_EXTRA_SRCS)

VPATH += $(MGOS_PATH)/fw/platforms/stm32 $(GEN_DIR) $(APP_SOURCE_DIRS) \
         $(MGOS_SRC_PATH) $(MONGOOSE_PATH) $(COMMON_PATH) $(FROZEN_PATH) \
         $(SPIFFS_PATH) $(COMMON_PATH)/mg_rpc \
         $(PLATFORM_SDK_PATH)/CS/mbedtls/library \
         $(PLATFORM_SDK_PATH)/STM/Src $(PLATFORM_SDK_PATH)/CS/extras \
         $(PLATFORM_SDK_PATH)/STM/Drivers/STM32F7xx_HAL_Driver/Src \
         $(PLATFORM_SDK_PATH)/STM/Drivers/CMSIS/Device/ST/STM32F7xx/Source/Templates/gcc \
         $(PLATFORM_SDK_PATH)/STM/Middlewares/Third_Party/LwIP/src/api \
         $(PLATFORM_SDK_PATH)/STM/Middlewares/Third_Party/LwIP/src/core \
         $(PLATFORM_SDK_PATH)/STM/Middlewares/Third_Party/LwIP/src/core/ipv4 \
         $(PLATFORM_SDK_PATH)/STM/Middlewares/Third_Party/LwIP/src/core/ipv6 \
         $(PLATFORM_SDK_PATH)/STM/Middlewares/Third_Party/LwIP/src/netif \
         $(PLATFORM_SDK_PATH)/STM/Middlewares/Third_Party/LwIP/src/netif/ppp

FW_PARTS = boot:src=$(APP_BIN),addr=0

include $(MGOS_PATH)/common/scripts/fw_meta.mk

OBJECTS := $(addprefix $(BUILD_DIR)/,$(SRCS:=.o))
CFLAGS ?= -DSTM32 -Os -fno-common -ffunction-sections -fdata-sections \
          $(PLATFORM_CFLAGS) $(MGOS_FEATURES) \
          -DLWIP_POSIX_SOCKETS_IO_NAMES=0 \
          -DMGOS_MAX_NUM_UARTS=2 \
          -DMGOS_VFS_DEFINE_LIBC_REENT_API \
          -DMGOS_VFS_DEFINE_LIBC_DIR_API \
          -DMGOS_VFS_DEFINE_DIRENT \
          -Wall -Werror ${MG_FEATURES_TINY} -DMG_ENABLE_DIRECTORY_LISTING

CFLAGS  += -DFLASH_BASE_ADDR=$(FLASH_BASE) \
           -DFLASH_SIZE=$(FLASH_SIZE) \
           -DFS_ADDR=$(FS_ADDR) \
           -DFS_SIZE=$(FS_SIZE)
LDFLAGS += -Wl,--defsym=FLASH_BASE=$(FLASH_BASE) \
           -Wl,--defsym=FLASH_SIZE=$(FLASH_SIZE) \
           -Wl,--defsym=FS_ADDR=$(FS_ADDR) \
           -Wl,--defsym=FS_SIZE=$(FS_SIZE)

LDLIBS = -Wl,--start-group

ifeq "${USE_LWIP}" "1"
CFLAGS += -DMG_NET_IF=3 -D__CPU_H__ -DMG_LWIP=1 -DLWIP_TIMEVAL_PRIVATE=0 \
          -DLWIP_TCP_KEEPALIVE=1 -DMG_SSL_IF=MG_SSL_IF_MBEDTLS \
          -DMGOS_APP=\"$(APP)\" -DMG_ENABLE_SSL
LDFLAGS += -L$(PLATFORM_SDK_PATH)/CS/mbedtls/library
LDLIBS += -lmbedcrypto -lmbedtls -lmbedx509
endif

LDLIBS += -lc -lgcc -lnosys -Wl,--end-group

IPATH += $(addprefix -I, $(SDK_INCLUDES) $(APP_SOURCE_DIRS))
IPATH += -I$(MGOS_PATH) -I$(MGOS_SRC_PATH) -I$(GEN_DIR) -I$(PLATFORM_SDK_PATH) \
         -I$(SPIFFS_PATH) -I$(MGOS_PLATFORM_PATH) \
         -I$(PLATFORM_SDK_PATH)/CS/mbedtls/include \
         -I$(PLATFORM_SDK_PATH)/CS/extras

all: $(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR) $(APP_BIN) $(FW_ZIP)

$(FW_MANIFEST): $(APP_BIN) $(MGOS_CONFIG_C) $(BUILD_INFO_C) $(BUILD_INFO_JSON) $(MG_BUILD_INFO_C) $(FW_DIR)

$(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR):
	$(vecho) MKDIR $@
	$(Q) mkdir -p $@

$(BUILD_DIR)/%.c.o: %.c $(GENFILES_FLAG)
	$(vecho) CC $<
	$(Q) mkdir -p $(basename $@)
	$(Q) $(CC) $(CFLAGS) $(IPATH) -c $< -o $@

$(BUILD_DIR)/%.s.o: %.s $(GENFILES_FLAG)
	$(vecho) CC $(notdir $<)
	$(Q) mkdir -p $(basename $@)
	$(Q) $(CC) $(CFLAGS) $(IPATH) -c $< -o $@

$(GENFILES_FLAG): $(GENFILES_LIST)
	$(Q) touch $@

$(APP_ELF): $(OBJECTS) $(FFI_EXPORTS_O) $(LDSCRIPT)
	$(vecho) LD $(notdir $@)
	$(Q) $(CC) $(CFLAGS) $(LDFLAGS) $(OBJECTS) $(FFI_EXPORTS_O) $(LDLIBS) -T$(LDSCRIPT) -o $@

$(APP_BIN): $(APP_ELF)
	$(vecho) OBJCOPY $(notdir $@)
	$(Q) $(OBJCOPY) -Obinary $^ $@

include $(MGOS_PATH)/common/scripts/build_info.mk
include $(MGOS_PATH)/common/scripts/ffi_exports.mk
include $(MGOS_PATH)/fw/src/mgos_config.mk

MGOS_CONF_SCHEMA += $(MGOS_PLATFORM_PATH)/stm32_sys_config.yaml

$(BUILD_INFO_C) $(BUILD_INFO_JSON):
	$(call gen_build_info,$@,,$(APP_BUILD_ID),$(APP_VERSION),,$(BUILD_INFO_C),$(BUILD_INFO_JSON))

$(MG_BUILD_INFO_C):
	$(call gen_build_info,$@,$(MGOS_PATH)/fw,,,mg_,$(MG_BUILD_INFO_C),)

$(MGOS_CONFIG_C): $(MANIFEST_FINAL)

# Pull in auto-generated .c dependencies (if any).
-include $(wildcard $(BUILD_DIR)/*.d)

$(FS_IMG): $(APP_FS_DIRS) $(FS_FILES) $(MGOS_CONFIG_C) $(MGOS_RO_VARS_C)
	$(call mkspiffs,$(FS_SIZE),$(FS_BLOCK_SIZE),$(FS_PAGE_SIZE),$(FS_ERASE_SIZE))

$(FS_BIN_C): $(FS_IMG)
	$(vecho) "GEN   $@"
	$(Q) (cd $(dir $(FS_IMG)) && xxd -i  $(notdir $(FS_IMG)) $(FS_BIN_C).tmp && \
	      echo 'const __attribute((section(".fs_bin")))' > $(FS_BIN_C) && \
	      cat  $(FS_BIN_C).tmp >> $(FS_BIN_C))

$(FFI_EXPORTS_C): $(FS_FILES)
	$(call gen_ffi_exports,$@,$(FFI_SYMBOLS),$(filter %.js,$(FS_FILES)))

# In ffi exports file we use fake signatures: void func(void), and it conflicts
# with the builtin functions like fopen, etc.
$(FFI_EXPORTS_O): CFLAGS += -fno-builtin

clean:
	@rm -rf $(BUILD_DIR)
