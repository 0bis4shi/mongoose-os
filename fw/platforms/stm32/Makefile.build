.PHONY: all clean
.DEFAULT_GOAL := all

MGOS_ENABLE_BITBANG = 0
MGOS_ENABLE_DEBUG_UDP = 0
MGOS_ENABLE_UPDATER = 0

MGOS_PATH ?= ../../..
include $(MGOS_PATH)/fw/common.mk
include $(MGOS_PATH)/fw/src/mgos_features.mk

TARGET ?=

ifeq "${TARGET}" ""
$(error Please, specify TARGET. Possible values are NUCLEO-F746ZG or DISCO-F746G)
endif

APP ?= mongoose-os
APP_PLATFORM = stm32
APP_CFLAGS ?=
APP_EXTRA_SRCS ?=
FFI_SYMBOLS ?=

# List of app source files, globs are supported
APP_SOURCES ?=
# List of include dirs, in addition to dirs from APP_SOURCES
APP_INCLUDES ?=
# List of app files to put into the device's filesystem, globs are supported
APP_FS_FILES ?=
# List of static libs (.a) which are parts of the app
APP_BIN_LIBS ?=

# NOTE: those two are deprecated. Use APP_SOURCES and APP_FS_FILES instead.
APP_MODULES ?=
APP_FS_PATH ?=

# For backward compatibility, convert old APP_MODULES and APP_FS_PATH into
# new APP_SOURCES and APP_FS_FILES
ifneq "$(APP_MODULES)" ""
APP_SOURCES += $(foreach m,$(APP_MODULES),$(m)/*.c $(m)/*.cpp)
endif
ifneq "$(APP_FS_PATH)" ""
APP_FS_FILES += $(foreach m,$(APP_FS_PATH),$(m)/*)
endif

# Get list of dirs which contain sources and filesystem files
APP_SOURCE_DIRS = $(sort $(dir $(APP_SOURCES)))
APP_FS_DIRS = $(sort $(dir $(APP_FS_FILES)))

APP_PATH := $(CURDIR)
LWIP_PATH ?= $(STM32CUBE_PATH)/Middlewares/Third_Party/LwIP
MBEDTLS_PATH ?= /opt/cs_mbedtls
FREERTOS_PATH ?= $(STM32CUBE_PATH)/Middlewares/Third_Party/FreeRTOS
MGOS_PLATFORM_PATH ?= $(MGOS_PATH)/fw/platforms/stm32
MGOS_FEATURES ?=

PLATFORM_CFLAGS ?= -mthumb -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16 \
                   -DSTM32 -DSTM32F746xx -DARM_HAVE_FPU=1 -D__WORDSIZE=32 -D_FILE_OFFSET_BITS=32 \
                   -DFW_ARCHITECTURE=$(APP_PLATFORM)
STM32CUBE_PATH = $(STM32CUBE_F7_PATH)

ifeq ("$(TARGET)", "NUCLEO-F746ZG")
PLATFORM_CFLAGS += -DMGOS_NUM_GPIO=114 -DHSE_VALUE=8000000 -DBSP_NUCLEO_F746ZG
else
ifeq ("$(TARGET)", "DISCO-F746G")
PLATFORM_CFLAGS += -DMGOS_NUM_GPIO=176 -DHSE_VALUE=25000000
endif
endif

CC = arm-none-eabi-gcc
OBJCOPY = arm-none-eabi-objcopy
NM = arm-none-eabi-nm

BUILD_DIR ?= $(CURDIR)/.build
FW_STAGING_DIR ?= $(BUILD_DIR)/fw_temp
FW_DIR ?= $(CURDIR)/fw
GEN_DIR ?= $(BUILD_DIR)/gen

# Absolutize all paths which can be given by the caller
override BUILD_DIR := $(abspath $(BUILD_DIR))
override FW_STAGING_DIR := $(abspath $(FW_STAGING_DIR))
override FW_DIR := $(abspath $(FW_DIR))
override GEN_DIR := $(abspath $(GEN_DIR))
override BUILD_DIR := $(abspath $(BUILD_DIR))

include $(MGOS_PATH)/fw/common.mk

# Platform support files
ADD_SRCS = arm_exc.c stm32_exc.c stm32_fs.c stm32_gpio.c stm32_gpio_defs.c \
           stm32_hal.c stm32_hw_timers.c \
           stm32_libc.c \
           stm32_main.c stm32_uart.c \
           stm32_updater.c \
           stm32_vfs_dev_flash.c \
           stm32f7xx_hal_msp.c \
           stm32f7xx_it.c \
           stm32f7xx_main.c \
           stm32f7xx_system.c \
           $(notdir $(FS_BIN_C))
# stm32_i2c.c

APP_ELF = $(BUILD_DIR)/$(APP).elf
APP_BIN = $(BUILD_DIR)/$(APP).bin
MAP_FILE = $(BUILD_DIR)/$(APP).map
SPIFFS_PATH ?= $(COMMON_PATH)/spiffs
SRAM_BASE_ADDR = 0x20000000
SRAM_SIZE = 327680
FLASH_BASE_ADDR = 0x8000000
FLASH_SIZE = 1048576
FS_SIZE = 262144
FS_BASE_ADDR = $(shell echo $$(($(FLASH_SIZE) - $(FS_SIZE))))
FS_BLOCK_SIZE = 4096
FS_PAGE_SIZE = 256
FS_ERASE_SIZE = 4096
MKSPIFFS ?= /usr/local/bin/mkspiffs8
FS_BIN_C = $(GEN_DIR)/fs_bin.c
FS_STAGING_DIR = $(BUILD_DIR)/fs

FS_IMG = $(FW_STAGING_DIR)/fs.bin

include $(MGOS_PATH)/fw/src/spiffs.mk

BUILD_INFO_C = $(GEN_DIR)/build_info.c
BUILD_INFO_JSON = $(GEN_DIR)/build_info.json
MG_BUILD_INFO_C = $(GEN_DIR)/mg_build_info.c
MGOS_CONFIG_C = $(GEN_DIR)/mgos_config.c
MGOS_CONFIG_DEFAULTS_JSON = $(GEN_DIR)/conf0.json
MGOS_CONFIG_SCHEMA_JSON = $(GEN_DIR)/mgos_config_schema.json
MGOS_RO_VARS_C = $(GEN_DIR)/mgos_ro_vars.c
MGOS_RO_VARS_SCHEMA_JSON = $(GEN_DIR)/mgos_ro_vars_schema.json
GENFILES_FLAG = $(BUILD_DIR)/genfiles.done
GENFILES_LIST = $(MGOS_CONFIG_C) $(MGOS_RO_VARS_C) $(BUILD_INFO_C) $(MG_BUILD_INFO_C) $(FS_BIN_C) $(FFI_EXPORTS_C)
SYMBOLS_DUMP = $(GEN_DIR)/symbols_dump.txt
FFI_EXPORTS_C = $(GEN_DIR)/ffi_exports.c
FFI_EXPORTS_O = $(BUILD_DIR)/ffi_exports.c.o

SDK_SRCS = $(wildcard $(LWIP_PATH)/src/core/*.c) tcpip.c sys_arch.c \
           $(wildcard $(LWIP_PATH)/src/core/ipv4/*.c) \
           $(wildcard $(LWIP_PATH)/src/core/ipv6/*.c) \
           $(wildcard $(LWIP_PATH)/src/netif/ethernet.c) \
           $(wildcard $(MBEDTLS_PATH)/library/*.c) \
           $(wildcard $(FREERTOS_PATH)/Source/*.c) port.c heap_3.c cmsis_os.c \
startup_stm32f746xx.S arm_exc_top.S \
stm32f7xx_hal_adc.c stm32f7xx_hal_adc_ex.c \
stm32f7xx_hal_can.c stm32f7xx_hal_cec.c stm32f7xx_hal_cortex.c \
stm32f7xx_hal_crc.c stm32f7xx_hal_crc_ex.c stm32f7xx_hal_cryp.c \
stm32f7xx_hal_cryp_ex.c stm32f7xx_hal_dac.c stm32f7xx_hal_dac_ex.c \
stm32f7xx_hal_dcmi.c stm32f7xx_hal_dcmi_ex.c stm32f7xx_hal_dfsdm.c \
stm32f7xx_hal_dma2d.c stm32f7xx_hal_dma.c stm32f7xx_hal_dma_ex.c \
stm32f7xx_hal_dsi.c stm32f7xx_hal_eth.c stm32f7xx_hal_flash.c \
stm32f7xx_hal_flash_ex.c stm32f7xx_hal_gpio.c stm32f7xx_hal_hash.c \
stm32f7xx_hal_hash_ex.c stm32f7xx_hal_hcd.c stm32f7xx_hal_i2c.c \
stm32f7xx_hal_i2c_ex.c stm32f7xx_hal_i2s.c stm32f7xx_hal_irda.c \
stm32f7xx_hal_iwdg.c stm32f7xx_hal_jpeg.c stm32f7xx_hal_lptim.c \
stm32f7xx_hal_ltdc.c stm32f7xx_hal_ltdc_ex.c stm32f7xx_hal_mdios.c \
stm32f7xx_hal_mmc.c stm32f7xx_hal_nand.c stm32f7xx_hal_nor.c \
stm32f7xx_hal_pcd.c stm32f7xx_hal_pcd_ex.c stm32f7xx_hal_pwr.c \
stm32f7xx_hal_pwr_ex.c stm32f7xx_hal_qspi.c stm32f7xx_hal_rcc.c \
stm32f7xx_hal_rcc_ex.c stm32f7xx_hal_rng.c stm32f7xx_hal_rtc.c \
stm32f7xx_hal_rtc_ex.c stm32f7xx_hal_sai.c stm32f7xx_hal_sai_ex.c \
stm32f7xx_hal_sd.c stm32f7xx_hal_sdram.c stm32f7xx_hal_smartcard.c \
stm32f7xx_hal_smartcard_ex.c stm32f7xx_hal_smbus.c stm32f7xx_hal_spdifrx.c \
stm32f7xx_hal_spi.c stm32f7xx_hal_sram.c stm32f7xx_hal_tim.c \
stm32f7xx_hal_tim_ex.c stm32f7xx_hal_uart.c stm32f7xx_hal_usart.c \
stm32f7xx_hal_wwdg.c \
stm32f7xx_ll_adc.c stm32f7xx_ll_crc.c stm32f7xx_ll_dac.c stm32f7xx_ll_dma2d.c \
stm32f7xx_ll_dma.c stm32f7xx_ll_exti.c stm32f7xx_ll_fmc.c stm32f7xx_ll_gpio.c \
stm32f7xx_ll_i2c.c stm32f7xx_ll_lptim.c stm32f7xx_ll_pwr.c stm32f7xx_ll_rcc.c \
stm32f7xx_ll_rng.c stm32f7xx_ll_rtc.c stm32f7xx_ll_sdmmc.c stm32f7xx_ll_spi.c \
stm32f7xx_ll_tim.c stm32f7xx_ll_usart.c stm32f7xx_ll_usb.c stm32f7xx_ll_utils.c

SDK_INCLUDES = $(STM32CUBE_PATH) \
               $(STM32CUBE_PATH)/Drivers/CMSIS/Include \
               $(STM32CUBE_PATH)/Drivers/CMSIS/Device/ST/STM32F7xx/Include \
               $(STM32CUBE_PATH)/Drivers/STM32F7xx_HAL_Driver/Inc \
               $(LWIP_PATH)/src/include \
               $(LWIP_PATH)/system \
               $(MBEDTLS_PATH)/include \
               $(FREERTOS_PATH)/Source/include \
               $(FREERTOS_PATH)/Source/CMSIS_RTOS \
               $(FREERTOS_PATH)/Source/portable/GCC/ARM_CM7/r0p1
LDSCRIPT = $(MGOS_PLATFORM_PATH)/ld/stm32.ld

MGOS_SRCS += $(notdir $(MGOS_CONFIG_C)) $(notdir $(MGOS_RO_VARS_C)) \
             $(notdir $(MG_BUILD_INFO_C)) $(notdir $(BUILD_INFO_C)) \
             mgos_config_util.c mgos_core_dump.c mgos_event.c mgos_gpio.c \
             mgos_hal_freertos.c mgos_hw_timers.c mgos_sys_config.c \
             mgos_time.c mgos_timers.c cs_crc32.c cs_file.c mgos_mongoose.c \
             json_utils.c frozen.c mgos_uart.c cs_rbuf.c mgos_init.c \
             cs_dbg.c mgos_dlsym.c mgos_system.c mgos_utils.c \
             mgos_vfs.c mgos_vfs_dev.c mgos_vfs_fs_spiffs.c

MGOS_SRCS += $(notdir $(foreach m, $(SPIFFS_PATH),$(wildcard $(m)/*.c)))

APP_SRCS := $(notdir $(foreach m,$(APP_SOURCES),$(wildcard $(m)))) $(APP_EXTRA_SRCS)
APP_BIN_LIB_FILES := $(foreach m,$(APP_BIN_LIBS),$(wildcard $(m)))

VPATH = $(MGOS_VPATH) $(MGOS_PLATFORM_PATH) $(MGOS_PLATFORM_PATH)/$(TARGET) \
        $(COMMON_PATH)/platforms/arm \
        $(GEN_DIR) $(APP_SOURCE_DIRS) \
        $(SPIFFS_PATH) \
        $(STM32CUBE_PATH)/Drivers/STM32F7xx_HAL_Driver/Src \
        $(LWIP_PATH)/src/api \
        $(LWIP_PATH)/src/core \
        $(LWIP_PATH)/src/core/ipv4 \
        $(LWIP_PATH)/src/core/ipv6 \
        $(LWIP_PATH)/src/netif \
        $(LWIP_PATH)/system/OS \
        $(MBEDTLS_PATH)/library \
        $(FREERTOS_PATH)/Source \
        $(FREERTOS_PATH)/Source/CMSIS_RTOS \
        $(FREERTOS_PATH)/Source/portable/MemMang \
        $(FREERTOS_PATH)/Source/portable/GCC/ARM_CM7/r0p1
IPATH = $(MGOS_IPATH) $(sort $(APP_SOURCE_DIRS) $(APP_INCLUDES)) \
        $(MGOS_PLATFORM_PATH) $(MGOS_PLATFORM_PATH)/include \
        $(MGOS_PLATFORM_PATH)/$(TARGET)/include \
        $(SPIFFS_PATH) $(GEN_DIR) \
        $(SDK_INCLUDES)

SSL_LIBS = $(addprefix $(MBEDTLS_PATH)/library/,libmbedcrypto.a libmbedtls.a libmbedx509.a)

SRCS = $(notdir $(SDK_SRCS) $(ADD_SRCS) $(APP_SRCS) $(MGOS_SRCS))

FW_PARTS = boot:src=$(APP_BIN),addr=0

include $(MGOS_PATH)/common/scripts/fw_meta.mk

OBJECTS := $(addprefix $(BUILD_DIR)/,$(SRCS:=.o))
CFLAGS ?= -std=gnu99 -Os -ggdb -MD -Wall -Werror \
          -fno-common -fno-inline \
          -ffunction-sections -fdata-sections \
          -D_GNU_SOURCE \
          $(PLATFORM_CFLAGS) $(MGOS_FEATURES) \
          -DLWIP_POSIX_SOCKETS_IO_NAMES=0 \
          -DMGOS_MAX_NUM_UARTS=2 \
          -DMGOS_VFS_DEFINE_LIBC_REENT_API \
          -DMGOS_VFS_DEFINE_LIBC_DIR_API \
          -DMGOS_VFS_DEFINE_DIRENT \
          -DCS_ENABLE_STDIO \
          -DMBEDTLS_CONFIG_FILE=\"mbedtls/config.h\" \
          ${MG_FEATURES_TINY} -DMG_ENABLE_DIRECTORY_LISTING

CFLAGS += $(APP_CFLAGS)
CXXFLAGS += $(APP_CXXFLAGS)

CFLAGS  += -DSRAM_BASE_ADDR=$(SRAM_BASE_ADDR) -DSRAM_SIZE=$(SRAM_SIZE) \
           -DFLASH_BASE_ADDR=$(FLASH_BASE_ADDR) -DFLASH_SIZE=$(FLASH_SIZE) \
           -DFS_BASE_ADDR=$(FS_BASE_ADDR) -DFS_SIZE=$(FS_SIZE) \
           -DNOCACHE_SIZE=0x400
LDFLAGS += -Wl,--defsym=SRAM_BASE_ADDR=$(SRAM_BASE_ADDR) -Wl,--defsym=SRAM_SIZE=$(SRAM_SIZE) \
           -Wl,--defsym=FLASH_BASE_ADDR=$(FLASH_BASE_ADDR) -Wl,--defsym=FLASH_SIZE=$(FLASH_SIZE) \
           -Wl,--defsym=FS_BASE_ADDR=$(FS_BASE_ADDR) -Wl,--defsym=FS_SIZE=$(FS_SIZE) \
           -Wl,--defsym=NOCACHE_SIZE=0x400

LDFLAGS += -Wl,--gc-sections -Wl,--undefined=fs_bin -Wl,-Map=$(MAP_FILE)

LDLIBS = -Wl,--start-group $(SSL_LIBS) -lc -lgcc -lnosys -Wl,--end-group

CFLAGS += -DMG_NET_IF=3 -D__CPU_H__ -DMG_LWIP=1 -DLWIP_TIMEVAL_PRIVATE=0 \
          -DLWIP_TCP_KEEPALIVE=1 -DMG_SSL_IF=MG_SSL_IF_MBEDTLS \
          -DMGOS_APP=\"$(APP)\" -DMG_ENABLE_SSL

all: $(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR) $(APP_BIN) $(FW_ZIP)

$(FW_MANIFEST): $(APP_BIN) $(MGOS_CONFIG_C) $(BUILD_INFO_C) $(BUILD_INFO_JSON) $(MG_BUILD_INFO_C) $(FW_DIR)

$(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR):
	$(vecho) MKDIR $@
	$(Q) mkdir -p $@

$(BUILD_DIR)/%.c.o: %.c $(GENFILES_FLAG)
	$(vecho) CC $<
	$(Q) $(CC) $(CFLAGS) $(addprefix -I, $(IPATH)) -c $< -o $@

$(BUILD_DIR)/%.S.o: %.S $(GENFILES_FLAG)
	$(vecho) ASM $(notdir $<)
	$(Q) $(CC) $(CFLAGS) $(addprefix -I, $(IPATH)) -c -x assembler-with-cpp $< -o $@

$(GENFILES_FLAG): $(GENFILES_LIST)
	$(Q) touch $@

$(APP_ELF): $(OBJECTS) $(FFI_EXPORTS_O) $(LDSCRIPT) $(SSL_LIBS)
	$(vecho) LD $(notdir $@)
	$(Q) $(CC) $(CFLAGS) $(LDFLAGS) $(OBJECTS) $(FFI_EXPORTS_O) $(APP_BIN_LIB_FILES) $(LDLIBS) -T$(LDSCRIPT) -o $@

$(APP_BIN): $(APP_ELF)
	$(vecho) OBJCOPY $(notdir $@)
	$(Q) $(OBJCOPY) -Obinary $^ $@

include $(MGOS_PATH)/common/scripts/build_info.mk
include $(MGOS_PATH)/common/scripts/ffi_exports.mk
include $(MGOS_PATH)/fw/src/mgos_config.mk

MGOS_CONF_SCHEMA += $(MGOS_PLATFORM_PATH)/stm32_sys_config.yaml

$(BUILD_INFO_C) $(BUILD_INFO_JSON):
	$(call gen_build_info,$@,$(APP_PATH),$(APP_BUILD_ID),$(APP_VERSION),,$(BUILD_INFO_C),$(BUILD_INFO_JSON))

$(MG_BUILD_INFO_C):
	$(call gen_build_info,$@,$(MGOS_PATH)/fw,,,mg_,$(MG_BUILD_INFO_C),)

$(MGOS_CONFIG_C): $(MANIFEST_FINAL)

# Pull in auto-generated .c dependencies (if any).
-include $(wildcard $(BUILD_DIR)/*.d)

$(FS_IMG): $(APP_FS_DIRS) $(FS_FILES) $(MGOS_CONFIG_C) $(MGOS_RO_VARS_C)
	$(call mkspiffs,$(FS_SIZE),$(FS_BLOCK_SIZE),$(FS_PAGE_SIZE),$(FS_ERASE_SIZE))

$(FS_BIN_C): $(FS_IMG)
	$(vecho) "GEN   $@"
	$(Q) (cd $(dir $(FS_IMG)) && xxd -i  $(notdir $(FS_IMG)) $(FS_BIN_C).tmp && \
	      echo 'const __attribute((section(".fs_bin")))' > $(FS_BIN_C) && \
	      cat  $(FS_BIN_C).tmp >> $(FS_BIN_C))

$(FFI_EXPORTS_C): $(FS_FILES)
	$(call gen_ffi_exports,$@,$(FFI_SYMBOLS),$(filter %.js,$(FS_FILES)))

# In ffi exports file we use fake signatures: void func(void), and it conflicts
# with the builtin functions like fopen, etc.
$(FFI_EXPORTS_O): CFLAGS += -fno-builtin

clean:
	@rm -rf $(BUILD_DIR)
