.PHONY: all clean
.DEFAULT_GOAL := all

MGOS_ENABLE_ATCA ?= 0
MGOS_ENABLE_ATCA_SERVICE ?= 0
MGOS_ENABLE_CONSOLE ?= 0
MGOS_ENABLE_CONFIG_SERVICE ?= 0
MGOS_ENABLE_DNS_SD ?= 0
MGOS_ENABLE_FILESYSTEM_SERVICE ?= 0
MGOS_ENABLE_GPIO_SERVICE ?= 0
MGOS_ENABLE_HTTP_SERVER ?= 0
MGOS_ENABLE_I2C ?= 0
MGOS_ENABLE_I2C_GPIO ?= 0
MGOS_ENABLE_I2C_SERVICE ?= 0
MGOS_ENABLE_JS ?= 0
MGOS_ENABLE_MQTT ?= 0
MGOS_ENABLE_RPC ?= 0
MGOS_ENABLE_RPC_CHANNEL_HTTP ?= 0
MGOS_ENABLE_RPC_CHANNEL_MQTT ?= 0
MGOS_ENABLE_RPC_CHANNEL_UART ?= o
MGOS_ENABLE_RPC_CHANNEL_WS ?= 0
MGOS_ENABLE_SYS_SERVICE ?= 0
MGOS_DEBUG_UART ?= 0
MGOS_ENABLE_UPDATER ?= 0
MGOS_ENABLE_UPDATER_POST ?= 0
MGOS_ENABLE_UPDATER_RPC ?= 0
MGOS_ENABLE_WIFI ?= 0

TARGET ?= F429ZI

APP ?= mongoose-os
APP_PLATFORM = stm32
APP_MODULES ?=
APP_CFLAGS ?=
APP_FS_PATH ?=
APP_EXTRA_SRCS ?=

PLATFORM_SDK_ROOT = /opt/stm32-sdks/
PLATFORM_SDK_PATH = ${PLATFORM_SDK_ROOT}/${TARGET}
PLATFORM_CFLAGS = $(shell cat $(PLATFORM_SDK_PATH)/cflags)

MGOS_PATH ?= ../../..
COMMON_PATH ?= $(MGOS_PATH)/common
MONGOOSE_PATH ?= $(MGOS_PATH)/mongoose
FROZEN_PATH ?= $(MGOS_PATH)/frozen
V7_PATH ?= $(MGOS_PATH)/v7

CC = arm-none-eabi-gcc
OBJCOPY = arm-none-eabi-objcopy

BUILD_DIR ?= $(CURDIR)/.build
FW_STAGING_DIR ?= $(BUILD_DIR)/fw_temp
FW_DIR ?= $(CURDIR)/fw
GEN_DIR ?= $(BUILD_DIR)/gen

# Absolutize all paths which can be given by the caller
override BUILD_DIR := $(abspath $(BUILD_DIR))
override FW_STAGING_DIR := $(abspath $(FW_STAGING_DIR))
override FW_DIR := $(abspath $(FW_DIR))
override GEN_DIR := $(abspath $(GEN_DIR))
override BUILD_DIR := $(abspath $(BUILD_DIR))

include $(MGOS_PATH)/fw/common.mk

include $(MGOS_PATH)/fw/src/features.mk

SDK_SRCS = $(shell find $(PLATFORM_SDK_PATH) -name '*.[cs]')
SDK_INCLUDES = $(shell find $(PLATFORM_SDK_PATH) -type d)
LDSCRIPT = $(shell find $(PLATFORM_SDK_PATH) -name '*.ld')

ADD_SRCS = mgos_main.c
VPATH += $(MGOS_PATH)/fw/platforms/stm32 $(GEN_DIR)

APP_ELF = $(BUILD_DIR)/$(APP).elf
APP_BIN = $(BUILD_DIR)/$(APP).bin
BUILD_INFO_C = $(GEN_DIR)/build_info.c
BUILD_INFO_JSON = $(GEN_DIR)/build_info.json
MG_BUILD_INFO_C = $(GEN_DIR)/mg_build_info.c

SRCS = $(SDK_SRCS) $(ADD_SRCS)
FW_PARTS = boot:src=$(APP_BIN),addr=0

include $(MGOS_PATH)/common/scripts/fw_meta.mk

OBJECTS := $(addprefix $(BUILD_DIR)/,$(SRCS:=.o))
CFLAGS ?= -Os -fno-common -ffunction-sections -fdata-sections \
          $(PLATFORM_CFLAGS)

LDFLAGS = -lc -lgcc -lnosys

IPATH += $(addprefix -I, $(SDK_INCLUDES))

all: $(APP_BIN) $(FW_ZIP)

$(FW_MANIFEST): $(APP_BIN) $(BUILD_INFO_C) $(BUILD_INFO_JSON) $(MG_BUILD_INFO_C) $(FW_DIR)

$(BUILD_DIR) $(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR):
	$(vecho) MKDIR $@
	$(Q) mkdir -p $@

$(BUILD_DIR)/%.c.o: %.c $(BUILD_DIR)
	$(vecho) CC $(notdir $<)
	$(Q) mkdir -p $(basename $@)
	$(Q) $(CC) $(CFLAGS) $(IPATH) -c $< -o $@

$(BUILD_DIR)/%.s.o: %.s $(BUILD_DIR)
	$(vecho) CC $(notdir $<)
	$(Q) mkdir -p $(basename $@)
	$(Q) $(CC) $(CFLAGS) $(IPATH) -c $< -o $@

$(APP_ELF): $(OBJECTS)
	$(vecho) LD $(notdir $@)
	$(Q) $(CC) $(CFLAGS) $(LDFLAGS) $(OBJECTS) -T$(LDSCRIPT) -o $@

$(APP_BIN): $(APP_ELF)
	$(vecho) OBJCOPY $(notdir $@)
	$(Q) $(OBJCOPY) -Obinary $^ $@

include $(MGOS_PATH)/common/scripts/build_info.mk

$(BUILD_INFO_C) $(BUILD_INFO_JSON): $(FW_STAGING_DIR) $(OBJECTS)
	$(call gen_build_info,$@,,$(APP_BUILD_ID),$(APP_VERSION),,$(BUILD_INFO_C),$(BUILD_INFO_JSON))

$(MG_BUILD_INFO_C): $(FW_STAGING_DIR) $(OBJECTS)
	$(call gen_build_info,$@,$(MGOS_PATH)/fw,,,mg_,$(MG_BUILD_INFO_C),)

# Pull in auto-generated .c dependencies (if any).
-include $(wildcard $(BUILD_DIR)/*.d)

clean:
	@rm -rf $(BUILD_DIR)
