---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS IoT Smart Heater Template
Parameters:
  DeviceID:
    Description: ID of the device which represents a heater
    Type: String
    AllowedPattern: "[a-zA-Z0-9_/#+]*"
    MinLength: '1'
    MaxLength: '2048'
    ConstraintDescription: must contain only alphanumberic characters and underscores
  ReadCapacityUnits:
    Description: Provisioned read throughput
    Type: Number
    Default: '5'
    MinValue: '5'
    MaxValue: '10000'
    ConstraintDescription: must be between 5 and 10000
  WriteCapacityUnits:
    Description: Provisioned write throughput
    Type: Number
    Default: '10'
    MinValue: '5'
    MaxValue: '10000'
    ConstraintDescription: must be between 5 and 10000

Resources:
  # Helpers for manipulating objects in S3 bucket {{{
  ReferenceDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: key
        AttributeType: S
      KeySchema:
      - AttributeName: key
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - reference
  RoleBasePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description:
        Fn::Join:
        - " "
        - - Base policy for all Lambda function roles in
          - Ref: AWS::StackName
          - "."
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Scan
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:dynamodb:'
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":table/"
              - Ref: ReferenceDB
  S3PutObjectFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - Ref: RoleBasePolicy
      Policies:
      - PolicyName: S3Writer
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:DeleteObject
            - s3:ListBucket
            - s3:PutObject
            - s3:PutObjectAcl
            Resource: "*"
  S3PutObjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../helpers/cloudformation-helpers
      Description: Used to put objects into S3.
      Handler: aws/s3.putObject
      Role:
        Fn::GetAtt:
        - S3PutObjectFunctionRole
        - Arn
      Runtime: nodejs4.3
      Timeout: 30
    DependsOn:
    - S3PutObjectFunctionRole
  # }}}

  # S3 bucket and files in it {{{
  myS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead

  heaterVarsFile:
    Type: Custom::heaterVarsFile
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - S3PutObjectFunction
        - Arn
      Bucket:
        Ref: myS3Bucket
      Key: vars.js
      Body:
        Fn::Join: ["\n", [
          "var heaterVars = {",
          {"Fn::Join": ["", ["  region: '", { "Ref": "AWS::Region" }, "',"]]},
          {"Fn::Join": ["", ["  tableName: '", { "Ref": "myDynamoDBTable" }, "',"]]},
          {"Fn::Join": ["", ["  accessKeyId: '", { "Ref": "myDynamoDBTableUserReadOnlyAccessKey" }, "',"]]},
          {"Fn::Join": ["", ["  secretAccessKey: '", { "Fn::GetAtt": ["myDynamoDBTableUserReadOnlyAccessKey", "SecretAccessKey"] }, "',"]]},
          "};",
          ""
        ]]
      ACL: public-read
  # }}}

  # dynamoDB table to save temperature {{{
  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: deviceid
        AttributeType: S
      - AttributeName: timestamp
        AttributeType: S
      KeySchema:
      - AttributeName: deviceid
        KeyType: HASH
      - AttributeName: timestamp
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits:
          Ref: ReadCapacityUnits
        WriteCapacityUnits:
          Ref: WriteCapacityUnits
  # }}}

  # Topic rule to save temperature in the dynamoDB table, and a role for it {{{
  myTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        RuleDisabled: 'false'
        Sql:
          Fn::Join: [ "", ["SELECT temp FROM '", { "Ref": "DeviceID" }, "/temp'"] ]
        Actions:
        - DynamoDB:
            TableName:
              Ref: myDynamoDBTable
            HashKeyField: deviceid
            HashKeyValue:
              Ref: DeviceID
            RangeKeyField: timestamp
            RangeKeyValue: "${timestamp()}"
            PayloadField: payload
            RoleArn:
              Fn::GetAtt:
              - myDynamoDBTableRolePutItem
              - Arn

  myDynamoDBTableRolePutItem:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - iot.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: allow-put-item
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":table/"
                - Ref: myDynamoDBTable
  # }}}

  # User which can read dynamoDB table, and its access key {{{
  myDynamoDBTableUserReadOnly:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: allow-read
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:Scan
            - dynamodb:Query
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":table/"
                - Ref: myDynamoDBTable

  myDynamoDBTableUserReadOnlyAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: { Ref: "myDynamoDBTableUserReadOnly" }
  # }}}

Outputs:
  S3BucketName:
    Value:
      Ref: myS3Bucket
    Description: Name of the newly created S3 bucket
  TableName:
    Value:
      Ref: myDynamoDBTable
    Description: Table name of the newly created DynamoDB table
  RuleName:
    Value:
      Ref: myTopicRule
    Description: Name of the newly created topic rule
