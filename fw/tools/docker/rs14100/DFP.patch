--- ./Driver/Common/chip/src/system_RS1xxxx.c.orig	2018-09-25 17:32:06.000000000 +0100
+++ ./Driver/Common/chip/src/system_RS1xxxx.c	2019-03-07 18:39:42.119243284 +0000
@@ -383,7 +383,7 @@
 error_t RSI_PS_EnterDeepSleep(SLEEP_TYPE_T sleepType , uint8_t lf_clk_mode)
 {
 	volatile int var = 0, enable_sdcss_based_wakeup = 0, enable_m4ulp_retention = 0;
-	uint32_t ipmuDummyRead =0, m4ulp_ram_core_status = 0, m4ulp_ram_peri_status = 0, disable_pads_ctrl = 0 , ulp_proc_clk;
+	uint32_t ipmuDummyRead =0, m4ulp_ram_core_status = 0, m4ulp_ram_peri_status = 0, disable_pads_ctrl = 0 , ulp_proc_clk = 0;
 	volatile uint8_t in_ps2_state=0;
 
 	/*Save the NVIC registers */
@@ -604,7 +604,7 @@
  */
 void SystemInit (void)
 {
-	volatile uint32_t ipmuDummyRead=0, bypass_curr_ctrl_reg=0;
+	volatile uint32_t ipmuDummyRead=0;
 	volatile uint32_t spareReg2=0;
 
 	/*IPMU dummy read to make IPMU block out of RESET*/
--- ./Driver/Peripheral_Library/driver/src/rsi_ethernet.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_ethernet.c	2019-03-08 16:57:11.941330252 +0000
@@ -752,6 +752,7 @@
 	 pDesc->RXDESC2 = (uint32_t)rcvcfg->dst;
 	
    pDesc->RXDESC1 = 	0x7FF | ((uint32_t) (0x7FF) << 11) | BIT(24);
+  (void) pETHHandle;
   return RSI_OK;
 }
 
@@ -849,6 +850,7 @@
 	
 	pDesc->TXDESC2 = (uint32_t)xfercfg->src;
 
+  (void) pETHHandle;
 
   return RSI_OK;
 
--- ./Driver/Peripheral_Library/driver/src/rsi_wurx.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_wurx.c	2019-03-08 17:18:48.393957287 +0000
@@ -270,13 +270,13 @@
    {
 		 /* get 64 bit tail data */
      while(!(WURX_CORR_DET_READ_REG & BIT(16)));
-	   RSI_WURX_ReadPattern1Odd(tail_data);
+     RSI_WURX_ReadPattern1Odd(tail_data);
    }
    else if(tail_data_len==TAIL_DATA_DECODE_128BIT)
    {
 		 /* get 128 bit tail data */		 
      while(!(WURX_CORR_DET_READ_REG & BIT(17)));
-	   RSI_WURX_ReadPattern1Odd(tail_data);		
+     RSI_WURX_ReadPattern1Odd(tail_data);		
      while(!(WURX_CORR_DET_READ_REG & BIT(16)));
      RSI_WURX_ReadPattern1Even(tail_data);
    }
@@ -284,21 +284,21 @@
    {
 		 /* get 192 bit tail data */		 
      while(!(WURX_CORR_DET_READ_REG & BIT(17)));
-	   RSI_WURX_ReadPattern1Odd(tail_data);		
+     RSI_WURX_ReadPattern1Odd(tail_data);		
      while(!(WURX_CORR_DET_READ_REG & BIT(16)));
      RSI_WURX_ReadPattern1Even(tail_data);
      while(!(WURX_CORR_DET_READ_REG & BIT(15)));
-	   RSI_WURX_ReadPattern2Odd(tail_data);	
+     RSI_WURX_ReadPattern2Odd(tail_data);	
    } 	
    else if(tail_data_len==TAIL_DATA_DECODE_256BIT)
    {	
 		 /* get 256 bit tail data */		 
      while(!(WURX_CORR_DET_READ_REG & BIT(17)));
-	   RSI_WURX_ReadPattern1Odd(tail_data);
+     RSI_WURX_ReadPattern1Odd(tail_data);
      while(!(WURX_CORR_DET_READ_REG & BIT(16)));
      RSI_WURX_ReadPattern1Even(tail_data);
      while(!(WURX_CORR_DET_READ_REG & BIT(15)));
-	   RSI_WURX_ReadPattern2Odd(tail_data);	
+     RSI_WURX_ReadPattern2Odd(tail_data);	
      while(!(WURX_CORR_DET_READ_REG & BIT(14)));
      RSI_WURX_ReadPattern2Even(tail_data);
    }		
--- ./Driver/Peripheral_Library/driver/src/rsi_gpdma.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_gpdma.c	2019-03-08 16:58:33.020023566 +0000
@@ -241,8 +241,8 @@
 {
 	GPDMA_DATACONTEXT_T *pDrv = (GPDMA_DATACONTEXT_T *) pHandle;
 	pDrv->baseG->GLOBAL.DMA_CHNL_SQUASH_REG = SET_BIT(dmaCh);
-  /* Waiting till squash bit becomes '0' */
-  while(pDrv->baseG->GLOBAL.DMA_CHNL_SQUASH_REG &SET_BIT(dmaCh));
+	/* Waiting till squash bit becomes '0' */
+	while(pDrv->baseG->GLOBAL.DMA_CHNL_SQUASH_REG &SET_BIT(dmaCh));
 	return RSI_OK;
 }
 
@@ -553,7 +553,7 @@
 	{
 		pDesc->pNextLink = NULL;
 	}
-
+	(void) pHandle;
 	return RSI_OK;
 }  
 
--- ./Driver/Peripheral_Library/driver/src/rsi_qspi.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_qspi.c	2019-03-08 16:55:31.274022636 +0000
@@ -177,6 +177,8 @@
 	qspi_switch_qspi2(qspi_reg, qspi_operational_mode, cs_no);
 	DEASSERT_CSN;
 
+	(void) wr_reg_delay_ms;
+
 	return flash_status;
 
 
@@ -196,6 +198,7 @@
 		qspi_write_to_flash(qspi_reg, QSPI_8BIT_LEN, WREN2, cs_no);
 	}
 	DEASSERT_CSN;
+	(void) flash_type;
 }
 
 void qspi_status_reg_write (
@@ -579,7 +582,8 @@
 	qspi_switch_qspi2(qspi_reg, SINGLE_MODE, cs_no);
 }
 #endif  
-
+	(void) ddr_mode_en;
+	(void) reset_bus_mode;
 }
 
 void qspi_status_control_reg_write(spi_config_t * spi_config, qspi_reg_t *qspi_reg, uint16_t write_command, uint32_t addr, uint16_t write_value, uint32_t cs_no, uint32_t wr_reg_delay_ms)
@@ -742,8 +746,8 @@
 	
 	do {
       while(qspi_reg->QSPI_STATUS_REG & QSPI_FIFO_EMPTY_RFIFO_S);          
-    
-	 if(spi_config->spi_config_3.ddr_mode_en){
+
+      if(spi_config->spi_config_3.ddr_mode_en){
        junk = (uint16_t)qspi_reg->QSPI_MANUAL_RD_WR_DATA_REG;
      } else {
        junk = (uint8_t)qspi_reg->QSPI_MANUAL_RD_WR_DATA_REG;
@@ -762,6 +766,8 @@
 	}
 
 	//XXX CSN must not be deassert here...
+
+	(void) junk;
 }
 
 void  RSI_QSPI_GPDMA_Init(uint32_t hsize, uint32_t ch_no, uint32_t mode) 
@@ -1969,6 +1975,7 @@
 			}
 		}
 	}
+	(void) write_cmd;
 	return status;
 }
 
@@ -2031,6 +2038,7 @@
 	qspi_reg->QSPI_AES_KEY_8_B = *key++;
 	qspi_reg->QSPI_AES_KEY_C_F = *key;
 	qspi_reg->OCTA_SPI_BUS_CONTROLLER2 |= EN_SECURITY; // enabling security
+	(void) kh_enable;
 }
 void qspi_qspiload_nonce(qspi_reg_t *qspi_reg, uint32_t *nonce)
 {
--- ./Driver/Peripheral_Library/driver/src/rsi_cts.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_cts.c	2019-03-08 15:51:17.181358875 +0000
@@ -201,6 +201,6 @@
  */
 void RSI_CTS_IntrClear(CTS_Type *cts)
 { 
-	CTS->CTS_CONFIG_REG_1_1_b.WAKE_UP_ACK =1;
-	CTS->CTS_CONFIG_REG_1_1_b.WAKE_UP_ACK =0;
+	cts->CTS_CONFIG_REG_1_1_b.WAKE_UP_ACK =1;
+	cts->CTS_CONFIG_REG_1_1_b.WAKE_UP_ACK =0;
 }
--- ./Driver/Peripheral_Library/driver/src/rsi_udma.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_udma.c	2019-03-08 17:17:56.284036668 +0000
@@ -393,6 +393,7 @@
     /* the number of items remaining to transfer */
     return (transferSize + 1);	
 	}
+	(void) vsUDMAChaConfigData;
 	return RSI_OK;
 }
  
@@ -501,6 +502,7 @@
 			PERIPHERAL_UDMA_DMA_SEL |= SET_BIT(7);
 			break;	
 	}
+	(void) pHandle;
 }	
 
 /* This API is used to configures required parameters for a channel */
--- ./Driver/Peripheral_Library/driver/src/rsi_adc.c.orig	2018-09-26 11:23:00.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_adc.c	2019-03-08 16:01:42.040495355 +0000
@@ -56,9 +56,7 @@
 {
 	if(( channel > MAX_CHNL_NO)|| 
 		 ( ping_length > PING_LEN_MAX ) ||
-	   ( pong_length > PONG_LEN_MAX ) ||
-		 ( ping_addr > PING_ADDR_MAX  ) ||
-	   ( pong_addr > PONG_ADDR_MAX) )
+	   ( pong_length > PONG_LEN_MAX ) )
 	{
 	  return INVALID_PARAMETERS;
 	}		
@@ -143,12 +141,13 @@
 void RSI_ADC_Calibration(void)
 {
 	volatile uint32_t auxadcCalibValueLoad=0 , auxadcCalibValue=0;
-  volatile uint32_t calib_done=0,cal,impuDummyRead=0;
+  volatile uint32_t calib_done=0, impuDummyRead;
 
 	AUX_ADC_DAC_COMP->AUXADC_CTRL_1_b.ADC_ENABLE |= 1U;
 	AUX_ADC_DAC_COMP->AUXADC_CONFIG_2 |= BIT(10);
 
 	impuDummyRead = ULP_SPI_MEM_MAP(0);
+  (void) impuDummyRead;
 	if(calib_done==0)
 	{	
 	  ULP_SPI_MEM_MAP(AUXADCREG0) |= BIT(13) | BIT(12) | BIT(11) | BIT(8) | BIT(7) | BIT(6) ;
@@ -157,12 +156,12 @@
     while(!(ULP_SPI_MEM_MAP(SPAREREG2) & BIT(0)));
     /*wait for 0*/
     while((ULP_SPI_MEM_MAP(SPAREREG2) & BIT(0)));	
-	  /*150 clocks of 1 Mhz wait*/
-	  auxadcCalibValue = ULP_SPI_MEM_MAP(AUXADCREG2);
-	  auxadcCalibValueLoad |= BIT(0) | BIT(7);
-	  auxadcCalibValueLoad |= (auxadcCalibValue & 0x1F) <<2;
-	  auxadcCalibValueLoad |= (((auxadcCalibValue >> POS6) & 0x1F) << POS8);
-	  auxadcCalibValueLoad |= (((auxadcCalibValue >> POS11) & 0x1F) << POS13);
+    /*150 clocks of 1 Mhz wait*/
+    auxadcCalibValue = ULP_SPI_MEM_MAP(AUXADCREG2);
+    auxadcCalibValueLoad |= BIT(0) | BIT(7);
+    auxadcCalibValueLoad |= (auxadcCalibValue & 0x1F) <<2;
+    auxadcCalibValueLoad |= (((auxadcCalibValue >> POS6) & 0x1F) << POS8);
+    auxadcCalibValueLoad |= (((auxadcCalibValue >> POS11) & 0x1F) << POS13);
     calib_done = 1;
 	}
   else
@@ -546,6 +545,7 @@
 			 } 	 
 	  }	
 	}	
+  (void) pstcADC;
 	return RSI_OK;
 }
 
@@ -812,7 +812,7 @@
 		(AUX_ADC_DAC_COMP->INTERNAL_DMA_CH_ENABLE_b.INTERNAL_DMA_ENABLE ))
 	{
 		intr_status = RSI_ADC_ChnlIntrStatus(AUX_ADC_DAC_COMP);
-		if(intr_status!=NULL)
+		if(intr_status!=0)
 		{	
 		  if(intr_status & BIT(0))
 		  {	
@@ -904,6 +904,7 @@
 	  AUX_ADC_DAC_COMP->AUXADC_CTRL_1_b.ADC_FIFO_FLUSH = 1;
 		pADCCallBack ->adccallbacFunc(intr_status , FIFO_MODE_EVENT);
 	}	
+  (void) pstcADC;
 	return RSI_OK;
 }	
 
@@ -1016,7 +1017,7 @@
 float RSI_ADC_VrefCal(void)
 {
 	  volatile	uint32_t ldo_drv =0;
-    volatile float vref_v,adc_offset=0;	
+    volatile float vref_v;	
 		ldo_drv = AUX_ADC_DAC_COMP->AUX_LDO_b.LDO_CTRL;
 		if(AUX_ADC_DAC_COMP->AUX_LDO_b.BYPASS_LDO==1)
 		{
--- ./Driver/Peripheral_Library/driver/src/rsi_sdioh.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_sdioh.c	2019-03-08 17:16:29.289002266 +0000
@@ -856,7 +856,7 @@
 	status_t     Stat   = RSI_SDIOH_ERROR;
 
 	CmdData.cmdIdx         = CMD11;
-	CmdData.cmdArg         = 0;
+	CmdData.cmdArg         = CmdArg;
 	CmdData.data           = NULL;
 	CmdData.blockSize      = 0;
 	CmdData.blockCount     = 0;
@@ -865,7 +865,7 @@
 
 	/* Send Command */
 	Stat = RSI_SDIOH_SendCommand(&CmdData);
-
+	(void) pcmdInfo;
 	return Stat;
 }
 
@@ -914,7 +914,7 @@
 
 	/*Send Command*/
 	Stat = RSI_SDIOH_SendCommand(&CmdData);
-
+	(void) pcmdInfo;
 	return Stat;
 }
 
@@ -1025,7 +1025,7 @@
 	status_t       Stat  = RSI_SDIOH_ERROR;
 
 	CmdData.cmdIdx        = CMD5;
-	CmdData.cmdArg        = *(uint32_t *)(&pcmdInfo->ocr);
+	CmdData.cmdArg        = pcmdInfo->ocrv;
 	if(pSdiohConfig->voltage ==1)
 	{
 		//voltage switch request
@@ -1064,7 +1064,7 @@
 	status_t        Stat  = RSI_SDIOH_ERROR;
 
 	CmdData.cmdIdx           = CMD5;
-	CmdData.cmdArg           = *(uint32_t *)&pcmdInfo->ocr;
+	CmdData.cmdArg           = pcmdInfo->ocrv;
 	CmdData.cmdArg           = (CmdData.cmdArg & 0x00000000);
 	CmdData.data             = NULL;
 	CmdData.blockSize        = 0;
@@ -1470,11 +1470,7 @@
 
 #define SD_IRQHandler                IRQ068_Handler
 
-SDIOH_INSTANCE_INTERNAL_DATA_T SdiohData =
-{
-		0u,
-		0u,
-};
+SDIOH_INSTANCE_INTERNAL_DATA_T SdiohData;
 
 static SDIOH_INTERN_DATA_T* SdiohGetInternDataPtr() 
 {
@@ -2070,10 +2066,13 @@
  */
 status_t sdioh_send_command( SDIOH_COMMAND_CONFIG_T* pConfig )
 {
-	SDIOH_COMMAND_FIELD_T CmdData;
+	union {
+		SDIOH_COMMAND_FIELD_T CmdData;
+		uint16_t CmdDatav;
+	} cmd;
 
 	// Clear structure
-	memset(&CmdData, 0, sizeof(CmdData));
+	memset(&cmd, 0, sizeof(cmd));
 
 	// Check for NULL pointer
 	if (pConfig == 0)
@@ -2085,16 +2084,16 @@
 	switch (pConfig->cmdType)
 	{
 	case NORMAL_CMD:
-		CmdData.cmdType = 0u;
+		cmd.CmdData.cmdType = 0u;
 		break;
 	case SUSPEND_CMD:
-		CmdData.cmdType = 1u;
+		cmd.CmdData.cmdType = 1u;
 		break;
 	case RESUME_CMD:
-		CmdData.cmdType = 2u;
+		cmd.CmdData.cmdType = 2u;
 		break;
 	case  ABORT_CMD:
-		CmdData.cmdType = 3u;
+		cmd.CmdData.cmdType = 3u;
 		break;
 	default:
 		return RSI_SDIOH_INVALID_PARAMETER ;
@@ -2103,54 +2102,54 @@
 	// Set data present during the command    
 	if(pConfig->dataPresent == 1)
 	{
-		CmdData.dataPresentSelect = 0x1;
+		cmd.CmdData.dataPresentSelect = 0x1;
 	}
 	else
 	{
-		CmdData.dataPresentSelect = 0x0;
+		cmd.CmdData.dataPresentSelect = 0x0;
 	}
 
 	// Set command index check 
 	if(pConfig->checkCmdIndex == 1)
 	{
-		CmdData.cmdIndexCheckEnable = 0x1;
+		cmd.CmdData.cmdIndexCheckEnable = 0x1;
 	}
 	else
 	{
-		CmdData.cmdIndexCheckEnable  = 0x0;
+		cmd.CmdData.cmdIndexCheckEnable  = 0x0;
 	}
 
 	// Set command CRC check
 	if(pConfig->checkCmdCrc ==1)
 	{
-		CmdData.cmdCrcCheckEnable = 0x1; 
+		cmd.CmdData.cmdCrcCheckEnable = 0x1; 
 	}
 	else
 	{
-		CmdData.cmdCrcCheckEnable = 0x0;
+		cmd.CmdData.cmdCrcCheckEnable = 0x0;
 	}
 
 	// Set command response type
 	switch (pConfig->responseType)
 	{
 	case SDIOH_RESPONSE_NONE:
-		CmdData.respType = 0u;
+		cmd.CmdData.respType = 0u;
 		break;
 	case SDIOH_RESPONSE_136BIT:
-		CmdData.respType = 1u;
+		cmd.CmdData.respType = 1u;
 		break;
 	case SDIOH_RESPONSE_48BIT:
-		CmdData.respType = 2u;
+		cmd.CmdData.respType = 2u;
 		break;
 	case SDIOH_RESPONSE_48BIT_BUSY_CHECK:
-		CmdData.respType = 3u;
+		cmd.CmdData.respType = 3u;
 		break;
 	default:
 		return RSI_SDIOH_INVALID_PARAMETER ;            
 	}
 
 	// Set command index
-	CmdData.cmdIndex = pConfig->cmdIndex;
+	cmd.CmdData.cmdIndex = pConfig->cmdIndex;
 
 	// Auto command setting
 	switch (pConfig->autoCmdType)
@@ -2180,7 +2179,7 @@
 	}
 	// Write command  to the hardware register (Command is sent)
 	//according to the spec, this register should be  write only once.
-	SDIOH->SMIH_COMMAND_REGISTER = *((uint16_t *)&CmdData);
+	SDIOH->SMIH_COMMAND_REGISTER = cmd.CmdDatav;
 
 	return RSI_SDIOH_OK;
 }
--- ./Driver/Peripheral_Library/driver/src/rsi_sio.c.orig	2018-09-25 16:40:24.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_sio.c	2019-03-08 17:02:48.052624567 +0000
@@ -64,6 +64,7 @@
 {
 	/*SIO CLock enable */
 	RSI_SIO_ClockEnable();
+	(void) pstcSio;
 	return RSI_OK;
 }
 
@@ -862,7 +863,7 @@
 		}
 		u8Parity = RSI_SIO_UartGetParity(u16Data);
 
-		if(u8Parity == u16UartDataFrame >> (u8DataLen + 1));
+		if(u8Parity == u16UartDataFrame >> (u8DataLen + 1))
 		{
 			return u16Data;
 		}
@@ -883,7 +884,7 @@
 		}
 		return u16Data;
 	}
-
+	(void) u8StopBits;
 	return RSI_OK;
 }
 
@@ -930,6 +931,7 @@
 		gstcSioCb.uart_sio.pvUartRx = ((uint16_t *) data);
 	}
 	gstcSioCb.uart_sio.u16UartRxCnt = numBytes;
+	(void) pstcSio;
 	return RSI_OK;
 }
 
@@ -956,7 +958,7 @@
 	gstcSioCb.uart_sio.u16UartRxCnt = numBytes;
 
 	while(gstcSioCb.uart_sio.enRxStatus == SioUartIdle);
-
+	(void) pstcSio;
 	return RSI_OK;
 }
 
@@ -1347,7 +1349,7 @@
 	}
 	//RSI_SIO_I2cGenerateStop(pstcSio);
 	//arm_print("R D \n");
-
+	(void) pstcConfig;
 	return RSI_OK ;
 
 
@@ -1460,6 +1462,8 @@
 	//RSI_SIO_I2cGenerateStop(pstcConfig);
 
 	//arm_print("W: D \n");
+	(void) u8PtrRxDat;
+	(void) u16RxLen;
 	return RSI_OK;
 }
 
--- ./Driver/Peripheral_Library/driver/src/rsi_qei.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/src/rsi_qei.c	2019-03-08 16:02:47.354911942 +0000
@@ -34,6 +34,7 @@
 {
 	/* QEI clock enable routine here */
 	clk_peripheral_clk_enable2(M4CLK,QE_PCLK_ENABLE);
+	(void) pstcQei;
 	return ;
 }
 
@@ -47,6 +48,7 @@
 {
 	/* clock disable to QEI module */
 	clk_peripheral_clk_disable2(M4CLK,QE_PCLK_ENABLE);
+	(void) pstcQei;
 	return ;
 }
 
--- ./Driver/Peripheral_Library/driver/inc/rsi_sio.h.orig	2018-09-25 11:10:32.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/inc/rsi_sio.h	2019-03-07 18:38:41.416886611 +0000
@@ -285,7 +285,6 @@
  *
  */
 /* SIO_SIO apis function prototype */
-static void RSI_SIO_ClockEnable(void) ;
 void RSI_SIO_I2cGenerateStop(volatile SIO_Type *pstcSio);
 error_t RSI_SIO_Init(volatile SIO_Type *pstcSio);
 error_t RSI_SIO_InitSpi(volatile SIO_Type *pstcSio , stc_sio_spi_cfg_t  *pstcSpiConfig);
@@ -306,8 +305,6 @@
 int RSI_SIO_UARTReadBlocking(volatile SIO_Type *pstcSio, void *data, int numBytes);
 
 /* SIO_I2C apis function prototype */
-static uint32_t RSI_SIO_I2cPrepareWrite(uint8_t   u8InDat);
-static uint32_t RSI_SIO_I2cPrepareRead(uint32_t   u32Indata);
 error_t RSI_SIO_I2cWrite(volatile SIO_Type *pstcSio , stc_sio_i2c_config_t *pstcConfig ,
 	                       uint8_t u8SlaveAddr , uint8_t *u8Data , uint16_t  u16Len);
 error_t RSI_SIO_I2cRead(volatile SIO_Type *pstcSio , stc_sio_i2c_config_t *pstcConfig ,
--- ./Driver/Peripheral_Library/driver/inc/rsi_adc.h.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/inc/rsi_adc.h	2019-03-07 18:33:46.741138721 +0000
@@ -131,18 +131,18 @@
 \brief ADC channel Configuration structure
 */
 
-volatile typedef struct 
+typedef struct 
 {
-	 uint32_t ping_addr[16];
-	 uint32_t pong_addr[16];
-	 uint16_t ping_length[16];
-	 uint16_t pong_length[16];
-	 uint32_t ping_mem1[16];
-	 uint32_t ping_mem2[16];
-	 uint32_t ping_mem3[16];
-	 uint32_t pong_mem1[16];
-	 uint32_t pong_mem2[16];
-	 uint32_t pong_mem3[16];	 
+	 __IOM uint32_t ping_addr[16];
+	 __IOM uint32_t pong_addr[16];
+	 __IOM uint16_t ping_length[16];
+	 __IOM uint16_t pong_length[16];
+	 __IOM uint32_t ping_mem1[16];
+	 __IOM uint32_t ping_mem2[16];
+	 __IOM uint32_t ping_mem3[16];
+	 __IOM uint32_t pong_mem1[16];
+	 __IOM uint32_t pong_mem2[16];
+	 __IOM uint32_t pong_mem3[16];	 
 }adc_config_t;
  
 typedef struct
--- ./Driver/Peripheral_Library/driver/inc/rsi_cts.h.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/inc/rsi_cts.h	2019-03-08 15:50:36.323844328 +0000
@@ -55,7 +55,7 @@
  */
 STATIC INLINE void RSI_CTS_BypassPRS(CTS_Type *cts,boolean_t enable)
 {
-  CTS->CTS_CONFIG_REG_1_1_b.BYPASS=enable;
+  cts->CTS_CONFIG_REG_1_1_b.BYPASS=enable;
 }
 
 
--- ./Driver/Peripheral_Library/driver/inc/rsi_ct.h.orig	2018-09-25 17:29:18.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/inc/rsi_ct.h	2019-03-07 18:35:03.528258667 +0000
@@ -912,6 +912,8 @@
 STATIC INLINE void RSI_CT_EdgeLevelEventControl(RSI_CT_T *pCT,uint32_t value)
 {
 	 //pCT ->RE_FE_RFE_LEV0_LEV1_EVENT_ENABLE_REG = value;	
+   (void) pCT;
+   (void) value;
 }
 
 /**
--- ./Driver/Peripheral_Library/driver/inc/rsi_sdioh.h.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/driver/inc/rsi_sdioh.h	2019-03-08 17:12:36.072884543 +0000
@@ -542,7 +542,10 @@
 {
 	SDIOH_CARD_TYPE_T       cardType;          
 	uint32_t                maxSectorNum;       
-	SDIOH_CMD_OCR_T         ocr;                   
+	union {
+		SDIOH_CMD_OCR_T         ocr;                   
+		uint32_t ocrv;
+	};
 	uint8_t                 cid[16];                   
 	uint8_t                 csd[16];               
 	uint16_t                rca;                      
--- ./Driver/Peripheral_Library/systemlevel/src/rsi_pll.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/systemlevel/src/rsi_pll.c	2019-03-08 17:37:55.252376936 +0000
@@ -25,7 +25,7 @@
  */
 #include<math.h> 
 #include "rsi_chip.h" 
-#include "..\driver\src\clock_update.c"
+#include "clock_update.h"
 
 /*clock sources preset */
 typedef enum CLK_PRESENT
--- ./Driver/Peripheral_Library/systemlevel/src/rsi_wwdt.c.orig	2018-09-25 17:29:18.000000000 +0100
+++ ./Driver/Peripheral_Library/systemlevel/src/rsi_wwdt.c	2019-03-08 17:38:55.778550289 +0000
@@ -29,6 +29,7 @@
 {
   RSI_PS_NpssPeriPowerUp(SLPSS_PWRGATE_ULP_MCUWDT |	SLPSS_PWRGATE_ULP_TIMEPERIOD);
 	MCU_FSM->MCU_FSM_CRTL_PDM_AND_ENABLES_b.ENABLE_WDT_IN_SLEEP_b = 1;
+	(void) pstcWDT;
 }
 
 /**
--- ./Driver/Peripheral_Library/systemlevel/src/rsi_bod.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/systemlevel/src/rsi_bod.c	2019-03-08 17:44:41.902939207 +0000
@@ -20,7 +20,6 @@
  * Includes
  */
 #include "rsi_chip.h"
-#include "rsi_board.h" 
 #include "rsi_bod.h"
 
 volatile uint32_t batt_status_check ;
@@ -39,8 +38,8 @@
  */
 float RSI_BOD_SoftTriggerGetBatteryStatus(void) 
 {
-	volatile static  uint32_t batt_status,batt_status_supply = 0;
-	volatile static  float vbatt = 0 ;
+	volatile uint32_t batt_status,batt_status_supply = 0;
+	volatile float vbatt = 0 ;
 
 	/*disable the BOD interrupt  */
 	RSI_BOD_IntrEnable(DISABLE);
@@ -63,6 +62,7 @@
 #else
 	/* converts the battery status to vbatt voltage value*/	
 	vbatt = BOD_VBATT_COMPUT_FIRST_ELEMENT * (BOD_VBATT_COMPUT_SECOND_ELEMENT + batt_status) / (BOD_VBATT_COMPUT_SECOND_ELEMENT+ BOD_VBATT_COMPUT_THIRD_ELEMENT) ;
+	(void) batt_status_supply;
 #endif
 
 	/*clr  the BOD interrupt  */
@@ -80,8 +80,8 @@
  */
 float RSI_BOD_PeriodicTriggerGetBatteryStatus(void) 
 {
-	volatile static  uint32_t batt_status =0 ;
-	volatile static  float vbatt = 0;
+	volatile uint32_t batt_status =0 ;
+	volatile float vbatt = 0;
 	/* Enable's the power gating for calibration block  and enable's the periodic trigger   */
 	ULP_SPI_MEM_MAP(BOD_VBATT_STATUS_REG) |= BOD_PWRGATE_EN_N_ULP_BUTTON_CALIB| (PERIODIC_TRIGGER_EN) 	; 
 	/* Wait for vbatt status valid bit to be 1. */
@@ -120,9 +120,9 @@
  */
 void RSI_BOD_Enable(uint8_t enable,float vbatt_threshold)
 {
-	volatile static uint32_t threshold_i = 0 ;
-	volatile static float  threshold_f = 0;
-	volatile  uint32_t delay_button = 0,button_loop = 0 ;
+	volatile uint32_t threshold_i = 0 ;
+	volatile float  threshold_f = 0;
+	volatile uint32_t delay_button = 0,button_loop = 0 ;
 	if (enable==1)
 	{
 		/* Enable signal for bod detection */
@@ -237,7 +237,7 @@
  */ 
 error_t RSI_BOD_ConfigSlotValue(uint16_t slot_value) 
 {
-	if(slot_value == SLOT_MIN_VALUE | slot_value > SLOT_MAX_VALUE )
+	if(slot_value == SLOT_MIN_VALUE || slot_value > SLOT_MAX_VALUE )
 	{  
 		return INVALID_PARAMETERS;  
 	}
@@ -260,7 +260,7 @@
 void RSI_BOD_ButtonWakeUpEnable(uint8_t enable)
 {
 
-	volatile  uint32_t delay_button = 0,button_loop = 0 ,division_factor =0;
+	volatile  uint32_t delay_button = 0,button_loop = 0;
 	if(enable ==1 )
 	{
 		/*To set the NPSS GPIO[2] in analog mode (TO GIVE VOLTAGE SUPPLY THROUGH PIN) */
@@ -321,7 +321,7 @@
  */
 uint32_t RSI_BOD_Buttonvalue(void)
 {
-	volatile static uint32_t buton_value =0 ;
+	volatile uint32_t buton_value =0 ;
 	/* To read which button has set to one */
 	buton_value =(((ULP_SPI_MEM_MAP(BOD_VBATT_STATUS_REG)) &(READ_BUTTON_VALUE_BITS)) >> 16) ;
 	if(buton_value == BUTTON_THREE_VALUE)
--- ./Driver/Peripheral_Library/systemlevel/src/rsi_ipmu.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/systemlevel/src/rsi_ipmu.c	2019-03-08 17:36:23.693083906 +0000
@@ -388,7 +388,7 @@
 	while(i--);
 	do {
 		/*wait for calibration done indication*/
-	} while (!(ULP_SPI_MEM_MAP(0x30C)) & BIT(20));
+	} while (!(ULP_SPI_MEM_MAP(0x30C) & BIT(20)));
 	/*Calibrated trim value*/
 	trim_value = ULP_SPI_MEM_MAP(0x30C);
 	trim_value = (trim_value >> 11);
@@ -459,7 +459,7 @@
  */
 uint32_t RSI_APB_ProgramConfigData(uint32_t *config)
 {
-	volatile uint32_t index = 0 , program_len = 0 ,reg_addr = 0 ;
+	volatile uint32_t index = 0 , program_len = 0;
 	volatile uint32_t clear_cnt=0,cnt=0 ;
 	volatile uint32_t reg_write_data=0,reg_read_data=0 , write_mask=0 , write_bit_pos=0;
 	volatile uint8_t  msb=0 , lsb=0 ;
--- ./Driver/Peripheral_Library/systemlevel/src/rsi_time_period.c.orig	2018-09-25 17:29:16.000000000 +0100
+++ ./Driver/Peripheral_Library/systemlevel/src/rsi_time_period.c	2019-03-08 17:39:51.912563735 +0000
@@ -204,7 +204,7 @@
 		/*Update at which temperature calibration has to happen*/
 		pstcTimePeriod->MCU_CAL_TEMP_PROG_REG_b.MAX_TEMP_CHANGE = u8TemperatureVal;
 	}
-
+	(void) u32XtalSettle;
 	return RSI_OK;
 }
 
