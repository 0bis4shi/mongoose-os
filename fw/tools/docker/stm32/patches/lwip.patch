--- Middlewares/Third_Party/LwIP/system/arch/cc.h.orig	2018-02-23 12:07:00.000000000 +0300
+++ Middlewares/Third_Party/LwIP/system/arch/cc.h	2018-08-02 13:06:29.350395134 +0300
@@ -38,7 +38,7 @@
 
 typedef int sys_prot_t;
 
-#define LWIP_PROVIDE_ERRNO
+/* #define LWIP_PROVIDE_ERRNO */
 
 #if defined (__GNUC__) & !defined (__CC_ARM)
 
--- Middlewares/Third_Party/LwIP/src/netif/ppp/pppos.c.orig	2018-02-23 10:07:00.000000000 +0000
+++ Middlewares/Third_Party/LwIP/src/netif/ppp/pppos.c	2019-01-15 21:20:23.852613310 +0000
@@ -595,7 +595,7 @@
             pppos->in_state = PDCONTROL;
             break;
           }
-          /* no break */
+          /* fall-thru */
 
           /* Else assume compressed address and control fields so
            * fall through to get the protocol... */
@@ -605,8 +605,6 @@
             pppos->in_state = PDPROTOCOL1;
             break;
           }
-          /* no break */
-
 #if 0
           else {
             PPPDEBUG(LOG_WARNING,
@@ -614,6 +612,7 @@
             pppos->in_state = PDSTART;
           }
 #endif
+          /* fall-thru */
         case PDPROTOCOL1:               /* Process protocol field 1. */
           /* If the lower bit is set, this is the end of the protocol
            * field. */
--- Middlewares/Third_Party/LwIP/src/include/netif/ppp/pppcrypt.h.orig	2018-02-23 10:07:00.000000000 +0000
+++ Middlewares/Third_Party/LwIP/src/include/netif/ppp/pppcrypt.h	2019-01-15 21:24:50.538468039 +0000
@@ -94,6 +94,11 @@
  */
 #if LWIP_USE_EXTERNAL_MBEDTLS
 
+#include "mbedtls/des.h"
+#include "mbedtls/md4.h"
+#include "mbedtls/md5.h"
+#include "mbedtls/sha1.h"
+
 #define lwip_md4_context mbedtls_md4_context
 #define lwip_md4_init mbedtls_md4_init
 #define lwip_md4_starts mbedtls_md4_starts
--- Middlewares/Third_Party/LwIP/system/OS/sys_arch.c.orig	2018-02-23 10:07:00.000000000 +0000
+++ Middlewares/Third_Party/LwIP/system/OS/sys_arch.c	2019-04-01 13:28:33.940488861 +0100
@@ -49,7 +49,8 @@
 //  Creates an empty mailbox.
 err_t sys_mbox_new(sys_mbox_t *mbox, int size)
 {
-  osMessageQDef(QUEUE, size, void *);
+  (void) size;
+  osMessageQDef(QUEUE, 32, void *);
   
   *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 
@@ -73,7 +74,7 @@
 */
 void sys_mbox_free(sys_mbox_t *mbox)
 {
-	if( osMessageWaiting(*mbox) )
+	if( osMessageQueueGetCount(*mbox) )
 	{
 		/* Line for breakpoint.  Should never break here! */
 		portNOP();
@@ -84,7 +85,7 @@
 		// TODO notify the user of failure.
 	}
 
-	osMessageDelete(*mbox);
+	osMessageQueueDelete(*mbox);
 
 #if SYS_STATS
      --lwip_stats.sys.mbox.used;
@@ -375,8 +376,12 @@
 */
 sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
 {
-  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
-  return osThreadCreate(&os_thread_def, arg);
+  const osThreadAttr_t os_thread_attr = {
+    .name = (char *)name,
+    .priority = (osPriority)prio,
+    .stack_size = stacksize,
+  };
+  return osThreadNew((osThreadFunc_t) thread, arg, &os_thread_attr);
 }
 
 /*
