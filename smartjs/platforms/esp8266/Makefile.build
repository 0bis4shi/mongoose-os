# -*- mode: makefile -*-
#
# ESP8266 Smart.js
#
# GC_DEBUG: if "true" (default) enables string ASN checks
# STACK_GUARD: if "true" (default) enables soft stack guard
# SSL: if set to "Krypton" enables SSL with the krypton lib
# OTA: if "1" enables rboot as a bootloader and generates files required for OTA
# FREEZE: if "1" freezes the stdlib object graph into a static graph loadable in ROM
#

REPO_ROOT ?= ../../..
COMMON_DIR ?= $(REPO_ROOT)/common
COMMON_ESP_DIR ?= $(REPO_ROOT)/common/platforms/esp8266

include $(COMMON_ESP_DIR)/common.mk

# For FW_VERSION, MG_FEATURES_TINY
include $(REPO_ROOT)/smartjs/common.mk

SMARTJS_PATH ?= ../..
KRYPTON_PATH ?= ../../../krypton
SMARTJS_SRC ?= $(SMARTJS_PATH)/src
SPIFFS_PATH ?= $(SMARTJS_SRC)/spiffs
SJSJS_PATH ?= $(SMARTJS_SRC)/js
COMMON_FS_PATH ?= $(SMARTJS_SRC)/fs
LWIP_PATH ?= $(COMMON_ESP_DIR)/lwip
V7_PATH ?= ../../../v7
MONGOOSE_PATH ?= ../../../mongoose
BOOTLOADER_PATH ?= $(COMMON_ESP_DIR)/rboot
ESPTOOL2 = $(BUILD_DIR)/esptool2
OTA ?= 1
FREEZE ?=

FLASH_SIZE ?= 1M

ifeq "${OTA}" "1"
FS_SIZE ?= 128K
else
FS_SIZE ?= 64K
endif

SYS_PARAM_SIZE = 0x4000

FW_FILE_1_ADDR = 0
FW_FILE_2_ADDR = 0x11000

ifeq "${OTA}" "1"
FW2_FILE_2_ADDR=$(shell printf "0x%08x" $$(($(FW_FILE_2_ADDR) + 0x100000)))
endif

BUILD_DIR = $(CURDIR)/build
LWIP_BUILD_DIR = $(BUILD_DIR)/lwip
TOOLS_DIR = tools
COMMON_TOOLS_DIR ?= ../../tools
FW_DIR = firmware

FS_DIR = fs
FS_BUILD_DIR = $(BUILD_DIR)/fs
RBOOT_FW_NAME = 0x00000.bin
FW_SECTS = .text .data .rodata
FW_USER_ARGS  = -quiet -bin -boot2

APP = smartjs
# SSL can be SDK or Krypton
SSL ?= None

APP_MODULES := user $(SPIFFS_PATH) $(COMMON_ESP_DIR)
APP_SRCS := $(notdir $(foreach m,$(APP_MODULES),$(wildcard $(m)/*.c))) \
            sj_prompt.c v7.c sj_v7_ext.c sj_http.c sj_config.c \
            sj_i2c_js.c sj_spi_js.c sj_wifi.c sj_gpio_js.c sj_timers.c \
            sj_adc_js.c mongoose.c sj_mongoose.c sj_mongoose_ws_client.c \
            device_config.c sys_config.c ubjserializer.c clubby_proto.c \
            sj_clubby.c

ifeq "${OTA}" "1"
APP_SRCS += rboot-bigflash.c rboot-api.c
endif

JSBIN_SRCS := $(SJSJS_PATH)/sys_init.js \
              $(SJSJS_PATH)/app_init.js \
              $(SJSJS_PATH)/I2C.js \
              $(JSBIN_EXTRA)
JS_SRCS    :=

# In order to keep compatibility
# with shared JS-files, which can call "File.eval(....)"
# using JS as extension
JSBIN_EXT := js
JS_EXT := js
VPATH = $(APP_MODULES) $(SMARTJS_SRC) $(V7_PATH) $(MONGOOSE_PATH) \
        $(BOOTLOADER_PATH)/rboot/appcode $(COMMON_DIR)
IPATH = $(REPO_ROOT) $(COMMON_DIR) $(SMARTJS_SRC) $(VPATH) \
        $(BOOTLOADER_PATH)/rboot $(LWIP_PATH)/src/include \
        $(LWIP_PATH)/src/include/ipv4 $(LWIP_PATH)/espressif/include \
        $(SDK_PATH)/include $(SDK_PATH)/include/json $(COMMON_ESP_DIR) .
LPATH = $(SDK_PATH)/lib $(BUILD_DIR)/lwip/ ./user/

# libraries used in this project, mainly provided by the SDK
APP_LIBS = c crypto gcc hal pp phy net80211 wpa

ifneq "${OTA}" "1"
APP_LIBS += main
else
APP_LIBS += main_ota
endif

SHIMS = -DNDEBUG

V7_FEATURES = -DV7_BUILD_PROFILE=1 -DV7_ENABLE_FILE \
              -DV7_DISABLE_AST_TAG_NAMES -DDISABLE_MD5 \
              -DV7_ENABLE__Math -DV7_ENABLE__Math__max -DV7_ENABLE__Math__min \
              -DV7_ENABLE__Math__random -DV7_ENABLE__Math__round \
              -DV7_ENABLE__Function__bind -DV7_ENABLE__File__list=1 \
              -DV7_ENABLE__Memory__stats -DV7_ENABLE__StackTrace=0 \
              -DV7_EXPOSE_PRIVATE \

FEATURES = $(V7_FEATURES) -DV7_TEMP_OFF \
           -DESP_COREDUMP -DESP_FLASH_BYTES_EMUL -DCS_ENABLE_SPIFFS \
           -DNO_BSD_SOCKETS \
           $(FEATURES_EXTRA) -DBOOT_BIG_FLASH \
           -DSPIFFS_ON_PAGE_MOVE_HOOK=esp_spiffs_on_page_move_hook \
           -DCS_MMAP -DV7_MMAP_EXEC -DCS_ENABLE_UBJSON \
           -DV7_MMAP_EXEC_ONLY="sys_init.js_app_init.js_I2C.js"

MONGOOSE_FEATURES = $(MG_FEATURES_TINY) -DMG_ESP8266

MEMORY_FLAGS = -DMBUF_SIZE_MULTIPLIER=1 -DFS_MAX_OPEN_FILES=5 \
               -DV7_STACK_SIZE=8192-64

GC_DEBUG ?= true
ifneq "$(GC_DEBUG)" "true"
MEMORY_FLAGS += -DV7_DISABLE_STR_ALLOC_SEQ
endif

STACK_GUARD ?= true
ifeq "$(STACK_GUARD)" "true"
MEMORY_FLAGS += -DV7_STACK_GUARD_MIN_SIZE=256 -finstrument-functions
endif

ifeq "$(SSL)" "Krypton"
IPATH += $(KRYPTON_PATH)
VPATH += $(KRYPTON_PATH)
APP_SRCS += krypton.c
FEATURES += -DMG_ENABLE_SSL -DMG_DISABLE_PFS -DESP_SSL_KRYPTON \
            -DKR_LOCALS -DKR_EXT_IO -DKR_EXT_RANDOM -DKR_EXT_MD5 -DKR_EXT_SHA1
endif

.PHONY: all clean

APP_LIBS += m lwip_cs
CFLAGS += -DLWIP_OPEN_SRC -DMG_LOCALS -DMG_DISABLE_SOCKET_IF -DESP_ENABLE_MG_LWIP_IF

FW_FS_OUT = $(FW_DIR)/$(FS_ADDR).bin

LD_SCRIPT_TEMPL = ld/smartjs.ld

_FLASH_SIZE = $(shell echo $$((`echo $(FLASH_SIZE) | \
   sed -e 's/K/*1024/;s/k/128/;s/M/*1048576/;s/m/*131072/'`)))
_FS_SIZE = $(shell echo $$((`echo $(FS_SIZE) | \
   sed -e 's/K/*1024/;s/k/128/;s/M/*1048576/;s/m/*131072/'`)))

APP_OBJS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(APP_SRCS))
SRCS = $(APP_SRCS)
OBJS = $(APP_OBJS)
LIBS = $(addprefix -l,$(APP_LIBS))
APP_AR = $(BUILD_DIR)/$(APP).a
LWIP_AR = $(LWIP_BUILD_DIR)/liblwip_cs.a
SYMCHECK_OUT = $(BUILD_DIR)/$(APP)_symcheck.out
SYMCHECK_FLAG = $(BUILD_DIR)/$(APP)_symcheck.ok
GENFILES_FLAG = $(BUILD_DIR)/genfiles.done
FW_FILE_1_OUT = $(FW_DIR)/$(shell printf "0x%05x.bin" $(FW_FILE_1_ADDR))
FW_FILE_2_OUT = $(FW_DIR)/$(shell printf "0x%05x.bin" $(FW_FILE_2_ADDR))
IMAGE_HEADER_SIZE = 0

FS_FILES = $(wildcard $(FS_DIR)/*) $(wildcard $(COMMON_FS_PATH)/*)
FW_FILES_OUT = $(FW_FILE_1_OUT) $(FW_FILE_2_OUT)

APP_OUT = $(BUILD_DIR)/$(APP).out
LD_SCRIPT = $(BUILD_DIR)/$(FW_FILE_2_ADDR).ld

ifeq "${FREEZE}" "1"
FEATURES += -DV7_THAW
APP_OBJS += $(BUILD_DIR)/fr.o
endif

ifneq "${OTA}" "1"
FS_ADDR = $(shell printf "0x%05x" "$$(($(_FLASH_SIZE) - $(SYS_PARAM_SIZE) - $(_FS_SIZE)))")
else
IMAGE_HEADER_SIZE = 0x10
ROM_SIZE = $(shell printf "0x%05x" "$$((0x100000 - $(FW_FILE_2_ADDR) - $(_FS_SIZE) - $(SYS_PARAM_SIZE) - $(IMAGE_HEADER_SIZE)))")
FS_ADDR  = $(shell printf "0x%05x" "$$((0x100000 - $(_FS_SIZE)))")
FS2_ADDR = $(shell printf "0x%05x" "$$((0x200000 - $(_FS_SIZE)))")
PREREQ = rboot
BOOTLOADER_FLAGS = -DFW1_ADDR=$(FW_FILE_2_ADDR) \
                   -DFW2_ADDR=$(FW2_FILE_2_ADDR) \
                   -DFW1_FS_ADDR=$(FS_ADDR) \
                   -DFW2_FS_ADDR=$(FS2_ADDR)

FW_METADATA_FILE= $(FW_DIR)/metadata.json
endif

INCDIRS = $(addprefix -I,$(IPATH)) -I$(BUILD_DIR)
LIBDIRS = $(addprefix -L,$(LPATH))

ESP_TOOL_CMD = $(ESPTOOL) elf2image -o $(FW_DIR)/ $(APP_OUT)

TIMESTAMP=$(shell TZ=GMT date +"%Y%m%d%H%M")

CFLAGS += $(MEMORY_FLAGS) $(SHIMS) $(FEATURES) $(MONGOOSE_FEATURES) \
          -DFS_SIZE=$(_FS_SIZE) \
          -DFW_VERSION=\"$(FW_VERSION)\" \
          -DFW_ARCHITECTURE=\"esp8266\" \
          -DFW_TIMESTAMP=\"$(TIMESTAMP)\"\
          $(CFLAGS_EXTRA)

ifneq "${OTA}" "1"
CFLAGS += -DFS_ADDR=$(FS_ADDR) -DDISABLE_OTA
else
CFLAGS += $(BOOTLOADER_FLAGS)
LDFLAGS += -u Cache_Read_Enable_New
endif

all: $(FW_DIR) $(BUILD_DIR) $(PREREQ) $(FW_FILES_OUT) $(FW_FS_OUT) $(FW_METADATA_FILE)
	$(Q) rm -f `ls $(FW_DIR)/* \
    | grep -vE '^($(FW_FILE_1_OUT)|$(FW_FILE_2_OUT)|$(FW_FS_OUT)|$(FW_DIR)/metadata.json)$$'`

$(BUILD_DIR) $(FW_DIR):
	$(Q) mkdir -p $@

$(FW_METADATA_FILE) : $(FW_FILES_OUT)
	$(vecho) GEN $(FW_METADATA_FILE)
	$(eval BUILD_REF=$(shell git symbolic-ref HEAD | sed 's:refs/heads/::'))
	$(eval BUILD_SHA=$(shell git rev-parse HEAD | head -c 8))
	$(Q) sed -e 's,%VERSION%,\"$(FW_VERSION)\",' \
	  -e 's,%NAME%,smartjs,' \
	  -e 's,%BUILD%,$(BUILD_REF)/$(BUILD_SHA),' \
	  -e 's,%DESCRIPTION%,,' \
	  -e 's,%PLATFORM%,esp8266,' \
	  -e 's,%TIMESTAMP%,$(TIMESTAMP),' \
	  -e 's,%FW_FILE%,/updates/$(notdir $(FW_FILE_2_OUT)),' \
	  -e 's,%FS_FILE%,/updates/$(notdir $(FW_FS_OUT)),' \
	  -e 's,%FW_CHECKSUM%,$(shell sha1sum $(FW_FILE_2_OUT) | awk '{print $$1}'),' \
	  -e 's,%FS_CHECKSUM%,$(shell sha1sum $(FW_FS_OUT) | awk '{print $$1}'),' \
	  -e 's,%BOOT_FILE%,/updates/$(notdir $(FW_FILE_1_OUT)),' \
	  -e 's,%BOOT_CHECKSUM%,$(shell sha1sum $(FW_FILE_1_OUT) | awk '{print $$1}'),' \
	  ./user/metadata.json.in > $@

# Main output product: firmware files.
#ifreq "${OTA}" "1"
$(FW_FILES_OUT): $(APP_OUT)
#else
$(FW_FILE_2_OUT) : $(APP_OUT)
#endif
	$(vecho) "FW $(APP_OUT) -> $(FW_DIR)"
ifneq "$(OTA)" "1"
	$(Q) $(ESPTOOL) elf2image -o $(FW_DIR)/ $(APP_OUT)
else
	$(Q) $(ESPTOOL2) $(FW_USER_ARGS) $(APP_OUT) $@ $(FW_SECTS)
endif

# -- Linking.

# Link the main ELF output file. Performs symbol clash check beforehand.
$(APP_OUT): $(APP_AR) $(LWIP_AR) $(LD_SCRIPT) $(SYMCHECK_FLAG)
	$(link)

# Symbol check: make sure app doesn't override SDK lib symbols.
# A target is created that uses the same libs but no user code and symbols are
# checked against main app library to make sure there's no overlap.
$(SYMCHECK_FLAG): $(APP_AR) $(SYMCHECK_OUT)
	$(vecho) "SYMCHECK $(SYMCHECK_OUT) vs $(APP_AR)"
	$(Q) python $(TOOLS_DIR)/symcheck.py $(SYMCHECK_OUT) $(APP_AR)
	$(Q) touch $@

$(SYMCHECK_OUT): $(BUILD_DIR)/dummy_main.o $(LD_SCRIPT)
	$(link)

$(BUILD_DIR)/dummy_main.c: $(APP_OBJS) Makefile
	$(vecho) "GEN $@"
	$(Q) echo "void user_init(void){}; " \
            "void __wrap_user_fatal_exception_handler(){}; " \
            "void __cyg_profile_func_enter(void *this_fn, void *call_site){(void) this_fn; (void) call_site;}" \
            "void __cyg_profile_func_exit(void *this_fn, void *call_site){(void) this_fn; (void) call_site;}" > $@

# Main app lib.
$(APP_AR): $(OBJS)
	$(vecho) "AR $@"
	$(Q) $(AR) cru $@ $^
# Move strings to flash too, we have the handler.
	$(Q) $(OBJCOPY) --rename-section .rodata=.irom0.text $(APP_AR)
	$(Q) $(OBJCOPY) --rename-section .rodata.str1.1=.irom0.text $(APP_AR)


# LWIP.
$(LWIP_AR): $(LWIP_PATH)
	$(Q) $(MAKE) --no-print-directory -C $(LWIP_PATH) -j3 all BUILD_DIR=$(LWIP_BUILD_DIR)

# This rule is for normal (pre-existing) sources from VPATH.
$(BUILD_DIR)/%.o: %.c $(GENFILES_FLAG)
	$(compile)

# This one is for generated sources in build directory.
$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.c $(GENFILES_FLAG)
	$(compile)

$(BUILD_DIR)/mongoose.o: mongoose.c
	$(compile) -DEXCLUDE_COMMON

$(BUILD_DIR)/fr.dump: $(BUILD_DIR)/v7
	$(vecho) "FREEZE"
	$(Q) $(BUILD_DIR)/v7 -freeze $@

$(BUILD_DIR)/fr.sym: $(BUILD_DIR)/v7
	$(vecho) "$(BUILD_DIR)/v7"
	$(Q) @nm $(BUILD_DIR)/v7 > $@

$(BUILD_DIR)/fr.c: $(BUILD_DIR)/fr.dump $(BUILD_DIR)/fr.sym
	$(vecho) "GEN fr.c"
	$(Q) $(V7_PATH)/scripts/freeze.py $(BUILD_DIR)/fr.dump $(BUILD_DIR)/fr.sym >$@

# Common gathering point for all generated files.
# Except version, which is special because it depends on objects.
$(GENFILES_FLAG): $(LD_SCRIPT)
	$(Q) touch $@

# Generate linker script.
$(LD_SCRIPT): $(LD_SCRIPT_TEMPL)
	$(eval _IROM0ADDR=$(shell printf "0x%08x" $$((0x40200000 + $(basename $(notdir $@)) + $(IMAGE_HEADER_SIZE)))))

ifneq "$(OTA)" "1"
	$(eval _IROM0SIZE=$(shell printf "0x%05x" $$(($(FS_ADDR) - $(basename $(notdir $@))))))
else
	$(eval _IROM0SIZE=$(ROM_SIZE))
endif

	$(vecho) "GEN $^ ($(_IROM0SIZE) @ $(_IROM0ADDR)) -> $@"
	$(Q) sed -e 's/_IROM0ADDR/$(_IROM0ADDR)/; s/_IROM0SIZE/$(_IROM0SIZE)/' $^ > $@

# Pull in auto-generated .c dependencies (if any).
-include $(wildcard $(BUILD_DIR)/*.d)

# -- Filesystem.

$(FS_BUILD_DIR):
	@mkdir -p $(FS_BUILD_DIR)

$(FW_FS_OUT): $(FS_BUILD_DIR) $(FS_FILES) $(JSBIN_SRCS) $(BUILD_DIR)/mkspiffs $(BUILD_DIR)/v7
# OSX virtualbox shared folder have issues with some symlinks. JS_SRCS contains their canonical location
	$(Q) $(foreach js,$(JS_SRCS), \
    echo "CP $(js) -> $(FS_BUILD_DIR)/$(basename $(notdir $(js))).$(JS_EXT)";\
    cp $(js) $(FS_BUILD_DIR);)
	$(Q) $(foreach jsbin,$(JSBIN_SRCS), \
    echo "V7 $(jsbin) -> $(FS_BUILD_DIR)/$(basename $(notdir $(jsbin))).$(JSBIN_EXT)";\
    $(BUILD_DIR)/v7 -c $(jsbin) > $(FS_BUILD_DIR)/$(basename $(notdir $(jsbin))).$(JSBIN_EXT);)
	$(Q) /usr/bin/rsync -vr --copy-links $(FS_FILES) $(FS_BUILD_DIR)/
	$(vecho) "FS $(FS_BUILD_DIR) ($(_FS_SIZE) @ $(FS_ADDR))-> $@"
	$(Q) $(BUILD_DIR)/mkspiffs $(_FS_SIZE) $(FS_BUILD_DIR) > $@
	$(Q) echo $(_FS_SIZE) > $(BUILD_DIR)/fs.size

$(BUILD_DIR)/mkspiffs: $(COMMON_TOOLS_DIR)/mkspiffs.c $(wildcard $(SPIFFS_PATH)/*.c)
	$(vecho) "GCC mkspiffs"
	$(Q) gcc -I. -I$(SPIFFS_PATH) -Iuser -o $@ $^ -DNO_ESP

$(V7_PATH)/v7.c:
	make -C $(V7_PATH) v7.c

$(BUILD_DIR)/v7: $(V7_PATH)/v7.c $(V7_PATH)/v7.h
	$(vecho) "GCC v7"
	$(Q) gcc -DV7_EXE -DV7_FREEZE $(V7_FEATURES) $(V7_PATH)/v7.c -lm -o $(BUILD_DIR)/v7
# Target specific warning inhibitions

build/spiffs_hydrogen.o: CFLAGS += -Wno-unused-function

#
# Auxiliary targets.
#

ifeq "$(OTA)" "1"

rboot: $(BUILD_DIR)/esptool2 $(BUILD_DIR)/rboot.bin $(FW_DIR)/$(RBOOT_FW_NAME)

$(ESPTOOL2):
	$(Q) $(MAKE) --no-print-directory -C $(BOOTLOADER_PATH)/esptool2 BUILD_DIR=$(BUILD_DIR)

$(BUILD_DIR)/rboot.bin: $(ESPTOOL2)
	$(Q) $(MAKE) --no-print-directory -C $(BOOTLOADER_PATH)/rboot -f rboot.mk RBOOT_BUILD_BASE=$(BUILD_DIR) \
    ESPTOOL2=$(ESPTOOL2) RBOOT_BIG_FLASH=1 CFLAGS_EXTRA="$(BOOTLOADER_FLAGS)"

$(FW_DIR)/$(RBOOT_FW_NAME) : $(BUILD_DIR)/rboot.bin
	$(Q) cp $(BUILD_DIR)/rboot.bin $(FW_DIR)/$(RBOOT_FW_NAME)

endif

clean:
	$(Q) rm -rf $(BUILD_DIR) $(FW_DIR)

flash: $(FW_OUT) $(FW_FS_OUT)
	$(Q) $(ESPTOOL) --port $(ESPPORT) --baud $(ESPSPEED) write_flash $(ESPFLASHARGS) \
                  $(FW_FILE_1_ADDR) $(FW_FILE_1_OUT) \
                  $(FW_FILE_2_ADDR) $(FW_FILE_2_OUT) \
                  $(FS_ADDR) $(FW_FS_OUT)

flash_no_fs: $(FW_OUT)
	$(Q) $(ESPTOOL) --port $(ESPPORT) --baud $(ESPSPEED) write_flash $(ESPFLASHARGS) \
                  $(FW_FILE_1_ADDR) $(FW_FILE_1_OUT) \
                  $(FW_FILE_2_ADDR) $(FW_FILE_2_OUT)

flash_fs: $(FW_FS_OUT)
	$(Q) $(ESPTOOL) --port $(ESPPORT) --baud $(ESPSPEED) write_flash $(ESPFLASHARGS) \
                  $(FS_ADDR) $(FW_FS_OUT)
